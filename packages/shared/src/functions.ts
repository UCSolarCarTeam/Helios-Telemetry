import { faker } from "@faker-js/faker";
import { ITelemetryData } from "./types";
import * as t from "io-ts";
import { PathReporter } from "io-ts/PathReporter";
import { isRight } from "fp-ts/Either";

export function generateFakeTelemetryData(): ITelemetryData {
  return {
    B3: {
      Acceleration: faker.number.int({ max: 100, min: 0 }),
      BrakeLightSignalOut: faker.datatype.boolean(),
      BrakeSwitch: faker.datatype.boolean(),
      DaytimeRunningLightSignalOut: faker.datatype.boolean(),
      ForwardIn: faker.datatype.boolean(),
      ForwardSwitchIn: faker.datatype.boolean(),
      HandbrakeSwitch: faker.datatype.boolean(),
      HazardLightsIn: faker.datatype.boolean(),
      HeadightsSwitchIn: faker.datatype.boolean(),
      HeadlightSignalOut: faker.datatype.boolean(),
      HornSignalOut: faker.datatype.boolean(),
      HornSwitchIn: faker.datatype.boolean(),
      Lap: faker.datatype.boolean(),
      LeftSignalIn: faker.datatype.boolean(),
      LeftSignalOut: faker.datatype.boolean(),
      MotorReset: faker.datatype.boolean(),
      Neutral: faker.datatype.boolean(),
      RaceMode: faker.datatype.boolean(),
      RegenBraking: faker.number.int({ max: 100, min: 0 }),
      Reverse: faker.datatype.boolean(),
      RightSignalIn: faker.datatype.boolean(),
      RightSignalOut: faker.datatype.boolean(),
      ZoomZoom: faker.datatype.boolean(),
    },
    Battery: {
      AlwaysOnSignalStatus: faker.datatype.boolean(),
      BatteryCell: {
        AverageCellVoltage: faker.number.int({ max: 100, min: 0 }),
        HighCellVoltage: faker.number.int({ max: 100, min: 0 }),
        HighCellVoltageId: faker.number.int({ max: 100, min: 0 }),
        LowCellVoltage: faker.number.int({ max: 100, min: 0 }),
        LowCellVoltageId: faker.number.int({ max: 100, min: 0 }),
        PopulatedCells: faker.number.int({ max: 100, min: 0 }),
      },
      BatteryFan: {
        FanSpeed: faker.number.int({ max: 100, min: 0 }),
        FanVoltage: faker.number.int({ max: 100, min: 0 }),
        RequestedFanSpeed: faker.number.int({ max: 100, min: 0 }),
      },
      BatteryPack: {
        Input12V: faker.number.int({ max: 100, min: 0 }),
        PackAmphours: faker.number.int({ max: 100, min: 0 }),
        PackCurrent: faker.number.int({ max: 100, min: 0 }),
        PackDepthOfDischarge: faker.number.int({ max: 100, min: 0 }),
        PackStateOfCharge: faker.number.int({ max: 100, min: 0 }),
        PackVoltage: faker.number.int({ max: 100, min: 0 }),
      },
      BatteryTemperature: {
        AverageTemperature: faker.number.int({ max: 100, min: -40 }),
        HighTemperature: faker.number.int({ max: 100, min: -40 }),
        InternalTemperature: faker.number.int({ max: 100, min: -40 }),
        LowTemperature: faker.number.int({ max: 100, min: -40 }),
      },
      BmuAlive: faker.number.int({ max: 1, min: 0 }),
      ChargeRelayEnabled: faker.datatype.boolean(),
      ChargerSafetyEnabled: faker.datatype.boolean(),
      DischargeRelayEnabled: faker.datatype.boolean(),
      HighThermistorId: faker.number.int({ max: 100, min: 0 }),
      IsChargingSignalStatus: faker.datatype.boolean(),
      IsReadySignalStatus: faker.datatype.boolean(),
      LowThermistorId: faker.number.int({ max: 100, min: 0 }),
      MalfunctionIndicatorActive: faker.datatype.boolean(),
      MultiPurposeInputSignalStatus: faker.datatype.boolean(),
    },
    BatteryFaults: {
      Errors: {
        AlwaysOnSupplyFault: faker.datatype.boolean({ probability: 0.01 }),
        CanbusCommunicationFault: faker.datatype.boolean({ probability: 0.01 }),
        ChargeLimitEnforcementFault: faker.datatype.boolean({
          probability: 0.01,
        }),
        ChargerSafetyRelayFault: faker.datatype.boolean({ probability: 0.01 }),
        CurrentSensorFault: faker.datatype.boolean({ probability: 0.01 }),
        DischargeLimitEnforcementFault: faker.datatype.boolean({
          probability: 0.01,
        }),
        FanMonitorFault: faker.datatype.boolean({ probability: 0.01 }),
        HighVoltageIsolationFault: faker.datatype.boolean({
          probability: 0.01,
        }),
        InternalCommunicationFault: faker.datatype.boolean({
          probability: 0.01,
        }),
        InternalConversionFault: faker.datatype.boolean({ probability: 0.01 }),
        InternalLogicFault: faker.datatype.boolean({ probability: 0.01 }),
        InternalMemoryFault: faker.datatype.boolean({ probability: 0.01 }),
        InternalThermistorFault: faker.datatype.boolean({ probability: 0.01 }),
        LowCellVoltageFault: faker.datatype.boolean({ probability: 0.01 }),
        OpenWiringFault: faker.datatype.boolean({ probability: 0.01 }),
        PackVoltageSensorFault: faker.datatype.boolean({ probability: 0.01 }),
        PowerSupply12VFault: faker.datatype.boolean({ probability: 0.01 }),
        ThermistorFault: faker.datatype.boolean({ probability: 0.01 }),
        VoltageRedundancyFault: faker.datatype.boolean({ probability: 0.01 }),
        WeakCellFault: faker.datatype.boolean({ probability: 0.01 }),
        WeakPackFault: faker.datatype.boolean({ probability: 0.01 }),
      },
      Warnings: {
        CclReducedDueToAlternateCurrentLimit: faker.datatype.boolean({
          probability: 0.01,
        }),
        CclReducedDueToChargerLatch: faker.datatype.boolean({
          probability: 0.01,
        }),
        CclReducedDueToHighCellResistance: faker.datatype.boolean({
          probability: 0.01,
        }),
        CclReducedDueToHighCellVoltage: faker.datatype.boolean({
          probability: 0.01,
        }),
        CclReducedDueToHighPackVoltage: faker.datatype.boolean({
          probability: 0.01,
        }),
        CclReducedDueToHighSoc: faker.datatype.boolean({ probability: 0.01 }),
        CclReducedDueToTemperature: faker.datatype.boolean({
          probability: 0.01,
        }),
        DclAndCclReducedDueToCommunicationFailsafe: faker.datatype.boolean({
          probability: 0.01,
        }),
        DclAndCclReducedDueToVoltageFailsafe: faker.datatype.boolean({
          probability: 0.01,
        }),
        DclReducedDueToHighCellResistance: faker.datatype.boolean({
          probability: 0.01,
        }),
        DclReducedDueToLowCellVoltage: faker.datatype.boolean({
          probability: 0.01,
        }),
        DclReducedDueToLowPackVoltage: faker.datatype.boolean({
          probability: 0.01,
        }),
        DclReducedDueToLowSoc: faker.datatype.boolean({ probability: 0.01 }),
        DclReducedDueToTemperature: faker.datatype.boolean({
          probability: 0.01,
        }),
      },
    },
    KeyMotor: {
      ControlMode: faker.datatype.boolean(),
      DebugMode: faker.datatype.boolean(),
      MotorMode: faker.datatype.boolean(),
      MotorSetpoint: faker.number.int({ max: 100, min: 0 }),
      SoftwareEnable: faker.datatype.boolean(),
    },
    MBMS: {
      AllowCharge: faker.datatype.boolean(),
      AllowDischarge: faker.datatype.boolean(),
      ArrayContactorError: faker.datatype.boolean(),
      ArrayContactorState: faker.datatype.boolean(),
      ArrayCurrent: faker.number.int({ max: 100, min: 0 }),
      ArrayHighTemperatureCurrentTrip: faker.datatype.boolean(),
      ArrayVoltage: faker.number.int({ max: 100, min: 0 }),
      AuxillaryBatteryVoltage: faker.number.int({ max: 100, min: 0 }),
      ChargeContactorError: faker.datatype.boolean(),
      ChargeContactorState: faker.datatype.boolean(),
      ChargeCurrent: faker.number.int({ max: 100, min: 0 }),
      ChargeHighTemperatureCurrentTrip: faker.datatype.boolean(),
      ChargeShouldTrip: faker.datatype.boolean(),
      ChargeVoltage: faker.number.int({ max: 100, min: 0 }),
      CommonContactorError: faker.datatype.boolean(),
      CommonContactorState: faker.datatype.boolean(),
      CommonCurrent: faker.number.int({ max: 100, min: 0 }),
      ContactorDisconnectedUnexpectedlyTrip: faker.datatype.boolean(),
      DischargeShouldTrip: faker.datatype.boolean(),
      HighCellVoltageTrip: faker.datatype.boolean(),
      HighCommonCurrentTrip: faker.datatype.boolean(),
      HighVoltageEnableState: faker.datatype.boolean(),
      LowCellVoltageTrip: faker.datatype.boolean(),
      LvContactorError: faker.datatype.boolean(),
      LvContactorState: faker.datatype.boolean(),
      LvCurrent: faker.number.int({ max: 100, min: 0 }),
      LvHighTemperatureCurrentTrip: faker.datatype.boolean(),
      LvVoltage: faker.number.int({ max: 100, min: 0 }),
      MotorContactorError: faker.datatype.boolean(),
      MotorContactorState: faker.datatype.boolean(),
      MotorCurrent: faker.number.int({ max: 100, min: 0 }),
      MotorHighTemperatureCurrentTrip: faker.datatype.boolean(),
      MotorVoltage: faker.number.int({ max: 100, min: 0 }),
      OrionCanReceivedRecently: faker.datatype.boolean(),
      OrionMessageTimeoutTrip: faker.datatype.boolean(),
      ProtectionTrip: faker.datatype.boolean(),
      StrobeBmsLight: faker.datatype.boolean(),
    },
    MPPT0: {
      ArrayCurrent: faker.number.int({ max: 100, min: 0 }),
      ArrayVoltage: faker.number.int({ max: 100, min: 0 }),
      BatteryVoltage: faker.number.int({ max: 100, min: 0 }),
      ChannelNumber: faker.number.int({ max: 100, min: 0 }),
      IsAlive: faker.number.int({ max: 100, min: 0 }),
      Temperature: faker.number.int({ max: 100, min: 0 }),
    },
    MPPT1: {
      ArrayCurrent: faker.number.int({ max: 100, min: 0 }),
      ArrayVoltage: faker.number.int({ max: 100, min: 0 }),
      BatteryVoltage: faker.number.int({ max: 100, min: 0 }),
      ChannelNumber: faker.number.int({ max: 100, min: 0 }),
      IsAlive: faker.number.int({ max: 100, min: 0 }),
      Temperature: faker.number.int({ max: 100, min: 0 }),
    },
    MPPT2: {
      ArrayCurrent: faker.number.int({ max: 100, min: 0 }),
      ArrayVoltage: faker.number.int({ max: 100, min: 0 }),
      BatteryVoltage: faker.number.int({ max: 100, min: 0 }),
      ChannelNumber: faker.number.int({ max: 100, min: 0 }),
      IsAlive: faker.number.int({ max: 100, min: 0 }),
      Temperature: faker.number.int({ max: 100, min: 0 }),
    },
    MPPT3: {
      ArrayCurrent: faker.number.int({ max: 100, min: 0 }),
      ArrayVoltage: faker.number.int({ max: 100, min: 0 }),
      BatteryVoltage: faker.number.int({ max: 100, min: 0 }),
      ChannelNumber: faker.number.int({ max: 100, min: 0 }),
      IsAlive: faker.number.int({ max: 100, min: 0 }),
      Temperature: faker.number.int({ max: 100, min: 0 }),
    },

    MotorDetails0: {
      AbsoluteAngle: faker.number.int({ max: 360, min: 0 }),
      CanSendError: faker.datatype.boolean(),
      CanSendWarning: faker.datatype.boolean(),
      ControlMode: faker.datatype.boolean(),
      ControlValue: faker.number.int({ max: 100, min: 0 }),
      CpuOverload: faker.datatype.boolean(),
      CpuTempTooHigh: faker.datatype.boolean(),
      CpuTemperatureVeryHigh: faker.datatype.boolean(),
      CurrentMotorPower: faker.number.int({ max: 100, min: 0 }),
      CurrentMotorTorque: faker.number.int({ max: 100, min: 0 }),
      CurrentRpmValue: faker.number.int({ max: 5000, min: 0 }),
      DclinkTempTooHigh: faker.datatype.boolean(),
      DclinkTemperatureVeryHigh: faker.datatype.boolean(),
      DebugMode: faker.datatype.boolean(),
      DelayInDclinkCommunication: faker.datatype.boolean(),
      DelayInReadingPosSensor: faker.datatype.boolean(),
      DelayInReadingTempSensor: faker.datatype.boolean(),
      DoubleCanIdOnBus: faker.datatype.boolean(),
      HallTempTooHigh: faker.datatype.boolean(),
      HallTemperatureVeryHigh: faker.datatype.boolean(),
      HwEnableNotSet: faker.datatype.boolean(),
      InitError: faker.datatype.boolean(),
      InvalidHallSector: faker.datatype.boolean(),
      Inverter1TempTooHigh: faker.datatype.boolean(),
      Inverter1TempVeryHigh: faker.datatype.boolean(),
      Inverter2TempTooHigh: faker.datatype.boolean(),
      Inverter2TempVeryHigh: faker.datatype.boolean(),
      Inverter3TempTooHigh: faker.datatype.boolean(),
      Inverter3TempVeryHigh: faker.datatype.boolean(),
      Inverter4TempTooHigh: faker.datatype.boolean(),
      Inverter4TempVeryHigh: faker.datatype.boolean(),
      Inverter5TempTooHigh: faker.datatype.boolean(),
      Inverter5TempVeryHigh: faker.datatype.boolean(),
      Inverter6TempTooHigh: faker.datatype.boolean(),
      Inverter6TempVeryHigh: faker.datatype.boolean(),
      InverterPeakCurrent: faker.number.int({ max: 500, min: 0 }),
      MotorAboutToStall: faker.datatype.boolean(),
      MotorErrors: {
        CanCommsTimeoutError: faker.datatype.boolean({ probability: 0.01 }),
        ControllerDataReadingTimeout: faker.datatype.boolean({
          probability: 0.01,
        }),
        DcOvervoltageError: faker.datatype.boolean({ probability: 0.01 }),
        DcUndervoltageError: faker.datatype.boolean({ probability: 0.01 }),
        ErrorInDclinkCommunication: faker.datatype.boolean({
          probability: 0.01,
        }),
        ErrorReadingEncoder: faker.datatype.boolean({ probability: 0.01 }),
        ErrorReadingTempSensor: faker.datatype.boolean({ probability: 0.01 }),
        InvalidHallSensorSequence: faker.datatype.boolean({
          probability: 0.01,
        }),
        Inverter1FaultError: faker.datatype.boolean({ probability: 0.01 }),
        Inverter1OvercurrentError: faker.datatype.boolean({
          probability: 0.01,
        }),
        Inverter2FaultError: faker.datatype.boolean({ probability: 0.01 }),
        Inverter2OvercurrentError: faker.datatype.boolean({
          probability: 0.01,
        }),
        Inverter3FaultError: faker.datatype.boolean({ probability: 0.01 }),
        Inverter3OvercurrentError: faker.datatype.boolean({
          probability: 0.01,
        }),
        Inverter4FaultError: faker.datatype.boolean({ probability: 0.01 }),
        Inverter4OvercurrentError: faker.datatype.boolean({
          probability: 0.01,
        }),
        Inverter5FaultError: faker.datatype.boolean({ probability: 0.01 }),
        Inverter5OvercurrentError: faker.datatype.boolean({
          probability: 0.01,
        }),
        Inverter6FaultError: faker.datatype.boolean({ probability: 0.01 }),
        Inverter6OvercurrentError: faker.datatype.boolean({
          probability: 0.01,
        }),
        LostFramesOnCanBusError: faker.datatype.boolean({ probability: 0.01 }),
        OverspeedError: faker.datatype.boolean({ probability: 0.01 }),
        PositionSensorReadingError: faker.datatype.boolean({
          probability: 0.01,
        }),
      },
      MotorMode: faker.datatype.boolean(),
      MotorStalled: faker.datatype.boolean(),
      MotorTemperature: faker.number.int({ max: 150, min: -40 }),
      MotorWarnings: {
        CanCommsTimeoutWarning: faker.datatype.boolean({ probability: 0.01 }),
        DcOvervoltageWarning: faker.datatype.boolean({ probability: 0.01 }),
        DcUndervoltageWarning: faker.datatype.boolean({ probability: 0.01 }),
        Inverter1FaultWarning: faker.datatype.boolean({ probability: 0.01 }),
        Inverter1OverCurrentWarning: faker.datatype.boolean({
          probability: 0.01,
        }),
        Inverter2FaultWarning: faker.datatype.boolean({ probability: 0.01 }),
        Inverter2OverCurrentWarning: faker.datatype.boolean({
          probability: 0.01,
        }),
        Inverter3FaultWarning: faker.datatype.boolean({ probability: 0.01 }),
        Inverter3OverCurrentWarning: faker.datatype.boolean({
          probability: 0.01,
        }),
        Inverter4FaultWarning: faker.datatype.boolean({ probability: 0.01 }),
        Inverter4OverCurrentWarning: faker.datatype.boolean({
          probability: 0.01,
        }),
        Inverter5FaultWarning: faker.datatype.boolean({ probability: 0.01 }),
        Inverter5OverCurrentWarning: faker.datatype.boolean({
          probability: 0.01,
        }),
        Inverter6FaultWarning: faker.datatype.boolean({ probability: 0.01 }),
        Inverter6OverCurrentWarning: faker.datatype.boolean({
          probability: 0.01,
        }),
        LostFramesOnCanBusWarning: faker.datatype.boolean({
          probability: 0.01,
        }),
        OverspeedWarning: faker.datatype.boolean({ probability: 0.01 }),
      },
      SettingsNotFound: faker.datatype.boolean(),
      SoftwareEnable: faker.datatype.boolean(),
      StartAtHighRpm: faker.datatype.boolean(),
      TorqueLimited: faker.datatype.boolean(),
      ZeroPositionOffsetNotSet: faker.datatype.boolean(),
    },
    MotorDetails1: {
      AbsoluteAngle: faker.number.int({ max: 360, min: 0 }),
      CanSendError: faker.datatype.boolean(),
      CanSendWarning: faker.datatype.boolean(),
      ControlMode: faker.datatype.boolean(),
      ControlValue: faker.number.int({ max: 100, min: 0 }),
      CpuOverload: faker.datatype.boolean(),
      CpuTempTooHigh: faker.datatype.boolean(),
      CpuTemperatureVeryHigh: faker.datatype.boolean(),
      CurrentMotorPower: faker.number.int({ max: 100, min: 0 }),
      CurrentMotorTorque: faker.number.int({ max: 100, min: 0 }),
      CurrentRpmValue: faker.number.int({ max: 5000, min: 0 }),
      DclinkTempTooHigh: faker.datatype.boolean(),
      DclinkTemperatureVeryHigh: faker.datatype.boolean(),
      DebugMode: faker.datatype.boolean(),
      DelayInDclinkCommunication: faker.datatype.boolean(),
      DelayInReadingPosSensor: faker.datatype.boolean(),
      DelayInReadingTempSensor: faker.datatype.boolean(),
      DoubleCanIdOnBus: faker.datatype.boolean(),
      HallTempTooHigh: faker.datatype.boolean(),
      HallTemperatureVeryHigh: faker.datatype.boolean(),
      HwEnableNotSet: faker.datatype.boolean(),
      InitError: faker.datatype.boolean(),
      InvalidHallSector: faker.datatype.boolean(),
      Inverter1TempTooHigh: faker.datatype.boolean(),
      Inverter1TempVeryHigh: faker.datatype.boolean(),
      Inverter2TempTooHigh: faker.datatype.boolean(),
      Inverter2TempVeryHigh: faker.datatype.boolean(),
      Inverter3TempTooHigh: faker.datatype.boolean(),
      Inverter3TempVeryHigh: faker.datatype.boolean(),
      Inverter4TempTooHigh: faker.datatype.boolean(),
      Inverter4TempVeryHigh: faker.datatype.boolean(),
      Inverter5TempTooHigh: faker.datatype.boolean(),
      Inverter5TempVeryHigh: faker.datatype.boolean(),
      Inverter6TempTooHigh: faker.datatype.boolean(),
      Inverter6TempVeryHigh: faker.datatype.boolean(),
      InverterPeakCurrent: faker.number.int({ max: 500, min: 0 }),
      MotorAboutToStall: faker.datatype.boolean(),
      MotorErrors: {
        CanCommsTimeoutError: faker.datatype.boolean({ probability: 0.01 }),
        ControllerDataReadingTimeout: faker.datatype.boolean({
          probability: 0.01,
        }),
        DcOvervoltageError: faker.datatype.boolean({ probability: 0.01 }),
        DcUndervoltageError: faker.datatype.boolean({ probability: 0.01 }),
        ErrorInDclinkCommunication: faker.datatype.boolean({
          probability: 0.01,
        }),
        ErrorReadingEncoder: faker.datatype.boolean({ probability: 0.01 }),
        ErrorReadingTempSensor: faker.datatype.boolean({ probability: 0.01 }),
        InvalidHallSensorSequence: faker.datatype.boolean({
          probability: 0.01,
        }),
        Inverter1FaultError: faker.datatype.boolean({ probability: 0.01 }),
        Inverter1OvercurrentError: faker.datatype.boolean({
          probability: 0.01,
        }),
        Inverter2FaultError: faker.datatype.boolean({ probability: 0.01 }),
        Inverter2OvercurrentError: faker.datatype.boolean({
          probability: 0.01,
        }),
        Inverter3FaultError: faker.datatype.boolean({ probability: 0.01 }),
        Inverter3OvercurrentError: faker.datatype.boolean({
          probability: 0.01,
        }),
        Inverter4FaultError: faker.datatype.boolean({ probability: 0.01 }),
        Inverter4OvercurrentError: faker.datatype.boolean({
          probability: 0.01,
        }),
        Inverter5FaultError: faker.datatype.boolean({ probability: 0.01 }),
        Inverter5OvercurrentError: faker.datatype.boolean({
          probability: 0.01,
        }),
        Inverter6FaultError: faker.datatype.boolean({ probability: 0.01 }),
        Inverter6OvercurrentError: faker.datatype.boolean({
          probability: 0.01,
        }),
        LostFramesOnCanBusError: faker.datatype.boolean({ probability: 0.01 }),
        OverspeedError: faker.datatype.boolean({ probability: 0.01 }),
        PositionSensorReadingError: faker.datatype.boolean({
          probability: 0.01,
        }),
      },
      MotorMode: faker.datatype.boolean(),
      MotorStalled: faker.datatype.boolean(),
      MotorTemperature: faker.number.int({ max: 150, min: -40 }),
      MotorWarnings: {
        CanCommsTimeoutWarning: faker.datatype.boolean({ probability: 0.01 }),
        DcOvervoltageWarning: faker.datatype.boolean({ probability: 0.01 }),
        DcUndervoltageWarning: faker.datatype.boolean({ probability: 0.01 }),
        Inverter1FaultWarning: faker.datatype.boolean({ probability: 0.01 }),
        Inverter1OverCurrentWarning: faker.datatype.boolean({
          probability: 0.01,
        }),
        Inverter2FaultWarning: faker.datatype.boolean({ probability: 0.01 }),
        Inverter2OverCurrentWarning: faker.datatype.boolean({
          probability: 0.01,
        }),
        Inverter3FaultWarning: faker.datatype.boolean({ probability: 0.01 }),
        Inverter3OverCurrentWarning: faker.datatype.boolean({
          probability: 0.01,
        }),
        Inverter4FaultWarning: faker.datatype.boolean({ probability: 0.01 }),
        Inverter4OverCurrentWarning: faker.datatype.boolean({
          probability: 0.01,
        }),
        Inverter5FaultWarning: faker.datatype.boolean({ probability: 0.01 }),
        Inverter5OverCurrentWarning: faker.datatype.boolean({
          probability: 0.01,
        }),
        Inverter6FaultWarning: faker.datatype.boolean({ probability: 0.01 }),
        Inverter6OverCurrentWarning: faker.datatype.boolean({
          probability: 0.01,
        }),
        LostFramesOnCanBusWarning: faker.datatype.boolean({
          probability: 0.01,
        }),
        OverspeedWarning: faker.datatype.boolean({ probability: 0.01 }),
      },
      SettingsNotFound: faker.datatype.boolean(),
      SoftwareEnable: faker.datatype.boolean(),
      StartAtHighRpm: faker.datatype.boolean(),
      TorqueLimited: faker.datatype.boolean(),
      ZeroPositionOffsetNotSet: faker.datatype.boolean(),
    },
    Pi: {
      rfid: faker.number.int({ max: 100, min: 0 }),
    },
    ProximitySensors: {
      ProximitySensor1: faker.number.int({ max: 100, min: 0 }),
      ProximitySensor2: faker.number.int({ max: 100, min: 0 }),
      ProximitySensor3: faker.number.int({ max: 100, min: 0 }),
      ProximitySensor4: faker.number.int({ max: 100, min: 0 }),
    },
    Telemetry: {
      GpsAdditionalFlags: faker.number.int({ max: 255, min: 0 }),
      GpsDay: faker.number.int({ max: 31, min: 1 }),
      GpsFixStatusFlags: faker.number.int({ max: 255, min: 0 }),
      GpsHour: faker.number.int({ max: 23, min: 0 }),
      GpsLatitude: faker.location.latitude(),
      GpsLongitude: faker.location.longitude(),
      GpsMinute: faker.number.int({ max: 59, min: 0 }),
      GpsMonth: faker.number.int({ max: 12, min: 1 }),
      GpsSecond: faker.number.int({ max: 59, min: 0 }),
      GpsValidityFlags: faker.number.int({ max: 255, min: 0 }),
      GpsYear: faker.number.int({ max: 2100, min: 2000 }),
      MpuAccelerationX: faker.number.float({
        max: 16,
        min: -16,
      }),
      MpuAccelerationY: faker.number.float({
        max: 16,
        min: -16,
      }),
      MpuAccelerationZ: faker.number.float({
        max: 16,
        min: -16,
      }),
      MpuRotationX: faker.number.float({
        max: 2000,
        min: -2000,
      }),
      MpuRotationY: faker.number.float({
        max: 2000,
        min: -2000,
      }),
      MpuRotationZ: faker.number.float({
        max: 2000,
        min: -2000,
      }),
      MpuTemperature: faker.number.float({ max: 85, min: -40 }),
    },
    TimeStamp: faker.date.recent().getTime(),
    Title: faker.lorem.words(2),
  };
}

//smaller data types which make up the large io-ts type for incoming packets (ITelemetryDataType)
const IB3Type = t.type({
  Acceleration: t.number,
  BrakeLightSignalOut: t.boolean,
  BrakeSwitch: t.boolean,
  DaytimeRunningLightSignalOut: t.boolean,
  ForwardIn: t.boolean,
  ForwardSwitchIn: t.boolean,
  HandbrakeSwitch: t.boolean,
  HazardLightsIn: t.boolean,
  HeadightsSwitchIn: t.boolean,
  HeadlightSignalOut: t.boolean,
  HornSignalOut: t.boolean,
  HornSwitchIn: t.boolean,
  Lap: t.boolean,
  LeftSignalIn: t.boolean,
  LeftSignalOut: t.boolean,
  MotorReset: t.boolean,
  Neutral: t.boolean,
  RaceMode: t.boolean,
  RegenBraking: t.number,
  Reverse: t.boolean,
  RightSignalIn: t.boolean,
  RightSignalOut: t.boolean,
  ZoomZoom: t.boolean,
});

const IBatteryCellType = t.type({
  AverageCellVoltage: t.number,
  HighCellVoltage: t.number,
  HighCellVoltageId: t.number,
  LowCellVoltage: t.number,
  LowCellVoltageId: t.number,
  PopulatedCells: t.number,
});

const IBatteryFanType = t.type({
  FanSpeed: t.number,
  FanVoltage: t.number,
  RequestedFanSpeed: t.number,
});

const IBatteryPackType = t.type({
  Input12V: t.number,
  PackAmphours: t.number,
  PackCurrent: t.number,
  PackDepthOfDischarge: t.number,
  PackStateOfCharge: t.number,
  PackVoltage: t.number,
});

const IBatteryTemperatureType = t.type({
  LowTemperature: t.number,
  AverageTemperature: t.number,
  InternalTemperature: t.number,
  HighTemperature: t.number,
});

const IBatteryFaultsWarningsType = t.type({
  CclReducedDueToAlternateCurrentLimit: t.boolean,
  CclReducedDueToChargerLatch: t.boolean,
  CclReducedDueToHighCellResistance: t.boolean,
  CclReducedDueToHighCellVoltage: t.boolean,
  CclReducedDueToHighPackVoltage: t.boolean,
  CclReducedDueToHighSoc: t.boolean,
  CclReducedDueToTemperature: t.boolean,
  DclAndCclReducedDueToCommunicationFailsafe: t.boolean,
  DclAndCclReducedDueToVoltageFailsafe: t.boolean,
  DclReducedDueToHighCellResistance: t.boolean,
  DclReducedDueToLowCellVoltage: t.boolean,
  DclReducedDueToLowPackVoltage: t.boolean,
  DclReducedDueToLowSoc: t.boolean,
  DclReducedDueToTemperature: t.boolean,
});

const IBatteryFaultsErrorsType = t.type({
  AlwaysOnSupplyFault: t.boolean,
  CanbusCommunicationFault: t.boolean,
  ChargeLimitEnforcementFault: t.boolean,
  ChargerSafetyRelayFault: t.boolean,
  CurrentSensorFault: t.boolean,
  DischargeLimitEnforcementFault: t.boolean,
  FanMonitorFault: t.boolean,
  HighVoltageIsolationFault: t.boolean,
  InternalCommunicationFault: t.boolean,
  InternalConversionFault: t.boolean,
  InternalLogicFault: t.boolean,
  InternalMemoryFault: t.boolean,
  InternalThermistorFault: t.boolean,
  LowCellVoltageFault: t.boolean,
  OpenWiringFault: t.boolean,
  PackVoltageSensorFault: t.boolean,
  PowerSupply12VFault: t.boolean,
  ThermistorFault: t.boolean,
  VoltageRedundancyFault: t.boolean,
  WeakCellFault: t.boolean,
  WeakPackFault: t.boolean,
});

const IBatteryType = t.type({
  AlwaysOnSignalStatus: t.boolean,
  BatteryCell: IBatteryCellType,
  BatteryFan: IBatteryFanType,
  BatteryPack: IBatteryPackType,
  BatteryTemperature: IBatteryTemperatureType,
  BmuAlive: t.number,
  ChargeRelayEnabled: t.boolean,
  ChargerSafetyEnabled: t.boolean,
  DischargeRelayEnabled: t.boolean,
  HighThermistorId: t.number,
  IsChargingSignalStatus: t.boolean,
  IsReadySignalStatus: t.boolean,
  LowThermistorId: t.number,
  MalfunctionIndicatorActive: t.boolean,
  MultiPurposeInputSignalStatus: t.boolean,
});

const IBatteryFaultsType = t.type({
  Warnings: IBatteryFaultsWarningsType,
  Errors: IBatteryFaultsErrorsType,
});

const IKeyMotorType = t.type({
  ControlMode: t.boolean,
  DebugMode: t.boolean,
  MotorMode: t.boolean,
  MotorSetpoint: t.number,
  SoftwareEnable: t.boolean,
});

const IMbmsType = t.type({
  AllowCharge: t.boolean,
  AllowDischarge: t.boolean,
  ArrayContactorError: t.boolean,
  ArrayContactorState: t.boolean,
  ArrayCurrent: t.number,
  ArrayHighTemperatureCurrentTrip: t.boolean,
  ArrayVoltage: t.number,
  AuxillaryBatteryVoltage: t.number,
  ChargeContactorError: t.boolean,
  ChargeContactorState: t.boolean,
  ChargeCurrent: t.number,
  ChargeHighTemperatureCurrentTrip: t.boolean,
  ChargeShouldTrip: t.boolean,
  ChargeVoltage: t.number,
  CommonContactorError: t.boolean,
  CommonContactorState: t.boolean,
  CommonCurrent: t.number,
  ContactorDisconnectedUnexpectedlyTrip: t.boolean,
  DischargeShouldTrip: t.boolean,
  HighCellVoltageTrip: t.boolean,
  HighCommonCurrentTrip: t.boolean,
  HighVoltageEnableState: t.boolean,
  LowCellVoltageTrip: t.boolean,
  LvContactorError: t.boolean,
  LvContactorState: t.boolean,
  LvCurrent: t.number,
  LvHighTemperatureCurrentTrip: t.boolean,
  LvVoltage: t.number,
  MotorContactorError: t.boolean,
  MotorContactorState: t.boolean,
  MotorCurrent: t.number,
  MotorHighTemperatureCurrentTrip: t.boolean,
  MotorVoltage: t.number,
  OrionCanReceivedRecently: t.boolean,
  OrionMessageTimeoutTrip: t.boolean,
  ProtectionTrip: t.boolean,
  StrobeBmsLight: t.boolean,
});

const IMPPTType = t.type({
  ArrayCurrent: t.number,
  ArrayVoltage: t.number,
  BatteryVoltage: t.number,
  ChannelNumber: t.number,
  IsAlive: t.number,
  Temperature: t.number,
});

const IMotorErrorsType = t.type({
  CanCommsTimeoutError: t.boolean,
  ControllerDataReadingTimeout: t.boolean,
  DcOvervoltageError: t.boolean,
  ErrorInDclinkCommunication: t.boolean,
  ErrorReadingEncoder: t.boolean,
  ErrorReadingTempSensor: t.boolean,
  DcUndervoltageError: t.boolean,
  InvalidHallSensorSequence: t.boolean,
  Inverter1FaultError: t.boolean,
  Inverter1OvercurrentError: t.boolean,
  Inverter2FaultError: t.boolean,
  Inverter2OvercurrentError: t.boolean,
  Inverter3FaultError: t.boolean,
  Inverter3OvercurrentError: t.boolean,
  Inverter4FaultError: t.boolean,
  Inverter4OvercurrentError: t.boolean,
  Inverter5FaultError: t.boolean,
  Inverter5OvercurrentError: t.boolean,
  Inverter6FaultError: t.boolean,
  Inverter6OvercurrentError: t.boolean,
  LostFramesOnCanBusError: t.boolean,
  OverspeedError: t.boolean,
  PositionSensorReadingError: t.boolean,
});

const IMotorWarningsType = t.type({
  CanCommsTimeoutWarning: t.boolean,
  DcOvervoltageWarning: t.boolean,
  DcUndervoltageWarning: t.boolean,
  Inverter1OverCurrentWarning: t.boolean,
  Inverter1FaultWarning: t.boolean,
  Inverter2FaultWarning: t.boolean,
  Inverter2OverCurrentWarning: t.boolean,
  Inverter3FaultWarning: t.boolean,
  Inverter3OverCurrentWarning: t.boolean,
  Inverter4FaultWarning: t.boolean,
  Inverter4OverCurrentWarning: t.boolean,
  Inverter5FaultWarning: t.boolean,
  Inverter6FaultWarning: t.boolean,
  Inverter5OverCurrentWarning: t.boolean,
  Inverter6OverCurrentWarning: t.boolean,
  LostFramesOnCanBusWarning: t.boolean,
  OverspeedWarning: t.boolean,
});

const IMotorDetailsType = t.type({
  AbsoluteAngle: t.number,
  CanSendError: t.boolean,
  CanSendWarning: t.boolean,
  ControlMode: t.boolean,
  ControlValue: t.number,
  CpuOverload: t.boolean,
  CpuTempTooHigh: t.boolean,
  CpuTemperatureVeryHigh: t.boolean,
  CurrentMotorPower: t.number,
  CurrentMotorTorque: t.number,
  CurrentRpmValue: t.number,
  DclinkTempTooHigh: t.boolean,
  DclinkTemperatureVeryHigh: t.boolean,
  DebugMode: t.boolean,
  DelayInDclinkCommunication: t.boolean,
  DelayInReadingPosSensor: t.boolean,
  DelayInReadingTempSensor: t.boolean,
  DoubleCanIdOnBus: t.boolean,
  HallTempTooHigh: t.boolean,
  HallTemperatureVeryHigh: t.boolean,
  HwEnableNotSet: t.boolean,
  InitError: t.boolean,
  InvalidHallSector: t.boolean,
  Inverter1TempTooHigh: t.boolean,
  Inverter1TempVeryHigh: t.boolean,
  Inverter2TempTooHigh: t.boolean,
  Inverter2TempVeryHigh: t.boolean,
  Inverter3TempTooHigh: t.boolean,
  Inverter3TempVeryHigh: t.boolean,
  Inverter4TempTooHigh: t.boolean,
  Inverter4TempVeryHigh: t.boolean,
  Inverter5TempTooHigh: t.boolean,
  Inverter5TempVeryHigh: t.boolean,
  Inverter6TempTooHigh: t.boolean,
  Inverter6TempVeryHigh: t.boolean,
  InverterPeakCurrent: t.number,
  MotorAboutToStall: t.boolean,
  MotorErrors: IMotorErrorsType,
  MotorWarnings: IMotorWarningsType,
  MotorMode: t.boolean,
  MotorStalled: t.boolean,
  MotorTemperature: t.number,
  SettingsNotFound: t.boolean,
  SoftwareEnable: t.boolean,
  StartAtHighRpm: t.boolean,
  TorqueLimited: t.boolean,
  ZeroPositionOffsetNotSet: t.boolean,
});

const IProximitySensorsType = t.type({
  ProximitySensor1: t.number,
  ProximitySensor2: t.number,
  ProximitySensor3: t.number,
  ProximitySensor4: t.number,
});

const ITelemetryType = t.type({
  GpsAdditionalFlags: t.number,
  GpsDay: t.number,
  GpsFixStatusFlags: t.number,
  GpsHour: t.number,
  GpsLatitude: t.number,
  GpsLongitude: t.number,
  GpsMinute: t.number,
  GpsMonth: t.number,
  GpsSecond: t.number,
  GpsValidityFlags: t.number,
  GpsYear: t.number,
  MpuAccelerationX: t.number,
  MpuAccelerationY: t.number,
  MpuAccelerationZ: t.number,
  MpuRotationX: t.number,
  MpuRotationY: t.number,
  MpuRotationZ: t.number,
  MpuTemperature: t.number,
});

export const ITelemetryDataType = t.type({
  B3: IB3Type,
  Battery: IBatteryType,
  BatteryFaults: IBatteryFaultsType,
  KeyMotor: IKeyMotorType,
  MBMS: IMbmsType,
  MPPT0: IMPPTType,
  MPPT1: IMPPTType,
  MPPT2: IMPPTType,
  MPPT3: IMPPTType,
  MotorDetails0: IMotorDetailsType,
  MotorDetails1: IMotorDetailsType,
  Pi: t.type({
    rfid: t.number,
  }),
  ProximitySensors: IProximitySensorsType,
  Telemetry: ITelemetryType,
  TimeStamp: t.number,
  Title: t.string,
});

export function validateTelemetryData(packet: any) {
  const validationResult = ITelemetryDataType.decode(packet);
  if (isRight(validationResult)) {
    return validationResult.right;
  } else {
    const errorMessages = PathReporter.report(validationResult).join(", ");
    throw new Error(`Invalid packet format: ${errorMessages}`);
  }
}
