import { faker } from "@faker-js/faker";
import { ITelemetryData } from "./types";

export function generateFakeTelemetryData(): ITelemetryData {
  return {
    AuxBms: {
      AllowCharge: faker.datatype.boolean(),
      AllowDischarge: faker.datatype.boolean(),
      AuxBmsAlive: faker.datatype.boolean(),
      AuxVoltage: faker.number.int({ max: 100, min: 0 }),
      ChargeContactorError: faker.datatype.boolean(),
      ChargeNotClosedDueToHighCurrent: faker.datatype.boolean(),
      ChargeOpenButShouldBeClosed: faker.datatype.boolean(),
      ChargeShouldTrip: faker.datatype.boolean(),
      ChargeTripDueToHighCellVoltage: faker.datatype.boolean(),
      ChargeTripDueToHighTemperatureAndCurrent: faker.datatype.boolean(),
      ChargeTripDueToPackCurrent: faker.datatype.boolean(),
      CommonContactorError: faker.datatype.boolean(),
      DischargeContactorError: faker.datatype.boolean(),
      DischargeNotClosedDueToHighCurrent: faker.datatype.boolean(),
      DischargeOpenButShouldBeClosed: faker.datatype.boolean(),
      DischargeShouldTrip: faker.datatype.boolean(),
      DischargeTripDueToHighTemperatureAndCurrent: faker.datatype.boolean(),
      DischargeTripDueToLowCellVoltage: faker.datatype.boolean(),
      DischargeTripDueToPackCurrent: faker.datatype.boolean(),
      HighVoltageEnableState: faker.datatype.boolean(),
      OrionCANReceivedRecently: faker.datatype.boolean(),
      PrechargeState: faker.lorem.words(2),
      ProtectionTrip: faker.datatype.boolean(),
      StrobeBmsLight: faker.datatype.boolean(),
      TripDueToOrionMessageTimeout: faker.datatype.boolean(),
    },
    Battery: {
      "12vInputVoltage": faker.number.int({ max: 100, min: 0 }),
      Alive: faker.datatype.boolean(),
      AverageCellVoltage: faker.number.int({ max: 100, min: 0 }),
      AverageTemperature: faker.number.int({ max: 100, min: 0 }),
      BMSRelayStatusFlags: {
        AlwaysOnSignalStatus: faker.datatype.boolean(),
        ChargeRelayEnabled: faker.datatype.boolean(),
        ChargerSafetyEnabled: faker.datatype.boolean(),
        DischargeRelayEnabled: faker.datatype.boolean(),
        IsChargingSignalStatus: faker.datatype.boolean(),
        IsReadySignalStatus: faker.datatype.boolean(),
        MalfunctionIndicatorActive: faker.datatype.boolean(),
        MultiPurposeInputSignalStatus: faker.datatype.boolean(),
      },
      FanSpeed: faker.number.int({ max: 100, min: 0 }),
      FanVoltage: faker.number.int({ max: 100, min: 0 }),
      HighCellVoltage: faker.number.int({ max: 100, min: 0 }),
      HighCellVoltageId: faker.number.int({ max: 100, min: 0 }),
      HighTemperature: faker.number.int({ max: 100, min: 0 }),
      HighThermistorId: faker.number.int({ max: 100, min: 0 }),
      InternalTemperature: faker.number.int({ max: 100, min: 0 }),
      LowCellVoltage: faker.number.int({ max: 100, min: 0 }),
      LowCellVoltageId: faker.number.int({ max: 100, min: 0 }),
      LowTemperature: faker.number.int({ max: 100, min: 0 }),
      LowThermistorId: faker.number.int({ max: 100, min: 0 }),
      PackAmphours: faker.number.int({ max: 100, min: 0 }),
      PackCurrent: faker.number.int({ max: 100, min: 0 }),
      PackDepthOfDischarge: faker.number.int({ max: 100, min: 0 }),
      PackStateOfCharge: faker.number.int({ max: 100, min: 0 }),
      PackVoltage: faker.number.int({ max: 100, min: 0 }),
      PopulatedCells: faker.number.int({ max: 100, min: 0 }),
      RequestedFanSpeed: faker.number.int({ max: 100, min: 0 }),
    },
    BatteryFaults: {
      ErrorFlags: {
        "12vPowerSupplyFault": faker.datatype.boolean(),
        AlwaysOnSupplyFault: faker.datatype.boolean(),
        CANBUSCommunicationsFault: faker.datatype.boolean(),
        ChargeLimitEnforcementFault: faker.datatype.boolean(),
        ChargerSafetyRelayFault: faker.datatype.boolean(),
        CurrentSensorFault: faker.datatype.boolean(),
        DischargeLimitEnforcementFault: faker.datatype.boolean(),
        FanMonitorFault: faker.datatype.boolean(),
        HighVoltageIsolationFault: faker.datatype.boolean(),
        InternalCommunicationFault: faker.datatype.boolean(),
        InternalConversionFault: faker.datatype.boolean(),
        InternalLogicFault: faker.datatype.boolean(),
        InternalMemoryFault: faker.datatype.boolean(),
        InternalThermistorsFault: faker.datatype.boolean(),
        LowCellVoltageFault: faker.datatype.boolean(),
        OpenWiringFault: faker.datatype.boolean(),
        PackVoltageSensorFault: faker.datatype.boolean(),
        ThermistorFault: faker.datatype.boolean(),
        VoltageRedundancyFault: faker.datatype.boolean(),
        WeakCellFault: faker.datatype.boolean(),
        WeakPackFault: faker.datatype.boolean(),
      },
      LimitFlags: {
        CclReducedDueToAlternateCurrentLimit: faker.datatype.boolean(),
        CclReducedDueToChargerLatch: faker.datatype.boolean(),
        CclReducedDueToHighCellResistance: faker.datatype.boolean(),
        CclReducedDueToHighCellVoltage: faker.datatype.boolean(),
        CclReducedDueToHighPackVoltage: faker.datatype.boolean(),
        CclReducedDueToHighSoc: faker.datatype.boolean(),
        CclReducedDueToTemperature: faker.datatype.boolean(),
        DclReducedDueToHighCellResistance: faker.datatype.boolean(),
        DclReducedDueToLowCellVoltage: faker.datatype.boolean(),
        DclReducedDueToLowPackVoltage: faker.datatype.boolean(),
        DclReducedDueToLowSoc: faker.datatype.boolean(),
        DclReducedDueToTemperature: faker.datatype.boolean(),
        DclandCclReducedDueToCommunicationFailsafe: faker.datatype.boolean(),
        DclandCclReducedDueToVoltageFailsafe: faker.datatype.boolean(),
      },
    },
    Ccs: {
      CcsAlive: faker.datatype.boolean(),
    },
    DriverControls: {
      Acceleration: faker.number.int({ max: 100, min: 0 }),
      Alive: faker.datatype.boolean(),
      Aux: faker.datatype.boolean(),
      Brakes: faker.datatype.boolean(),
      Forward: faker.datatype.boolean(),
      Hazard: faker.datatype.boolean(),
      HeadlightsHigh: faker.datatype.boolean(),
      HeadlightsLow: faker.datatype.boolean(),
      HeadlightsOff: faker.datatype.boolean(),
      Horn: faker.datatype.boolean(),
      Interior: faker.datatype.boolean(),
      Lap: faker.datatype.boolean(),
      NextSong: faker.datatype.boolean(),
      PrevSong: faker.datatype.boolean(),
      PushToTalk: faker.datatype.boolean(),
      RegenBraking: faker.number.int({ max: 100, min: 0 }),
      Reset: faker.datatype.boolean(),
      Reverse: faker.datatype.boolean(),
      SignalLeft: faker.datatype.boolean(),
      SignalRight: faker.datatype.boolean(),
      VolumeDown: faker.datatype.boolean(),
      VolumeUp: faker.datatype.boolean(),
    },
    KeyMotor: [
      {
        Alive: faker.datatype.boolean(),
        BusCurrent: faker.number.int({ max: 100, min: 0 }),
        BusVoltage: faker.number.int({ max: 100, min: 0 }),
        SetCurrent: faker.number.int({ max: 100, min: 0 }),
        SetVelocity: faker.number.int({ max: 100, min: 0 }),
        VehicleVelocity: faker.number.int({ max: 100, min: 0 }),
      },
      {
        Alive: faker.datatype.boolean(),
        BusCurrent: faker.number.int({ max: 100, min: 0 }),
        BusVoltage: faker.number.int({ max: 100, min: 0 }),
        SetCurrent: faker.number.int({ max: 100, min: 0 }),
        SetVelocity: faker.number.int({ max: 100, min: 0 }),
        VehicleVelocity: faker.number.int({ max: 100, min: 0 }),
      },
    ],
    Lights: {
      Alive: faker.datatype.boolean(),
      BmsStrobeLight: faker.datatype.boolean(),
      Brakes: faker.datatype.boolean(),
      HighBeams: faker.datatype.boolean(),
      LeftSignal: faker.datatype.boolean(),
      LowBeams: faker.datatype.boolean(),
      RightSignal: faker.datatype.boolean(),
    },
    MPPT: [
      {
        Alive: faker.datatype.boolean(),
        ArrayCurrent: faker.number.int({ max: 100, min: 0 }),
        ArrayVoltage: faker.number.int({ max: 100, min: 0 }),
        BatteryVoltage: faker.number.int({ max: 100, min: 0 }),
        Temperature: faker.number.int({ max: 100, min: 0 }),
      },
      {
        Alive: faker.datatype.boolean(),
        ArrayCurrent: faker.number.int({ max: 100, min: 0 }),
        ArrayVoltage: faker.number.int({ max: 100, min: 0 }),
        BatteryVoltage: faker.number.int({ max: 100, min: 0 }),
        Temperature: faker.number.int({ max: 100, min: 0 }),
      },
      {
        Alive: faker.datatype.boolean(),
        ArrayCurrent: faker.number.int({ max: 100, min: 0 }),
        ArrayVoltage: faker.number.int({ max: 100, min: 0 }),
        BatteryVoltage: faker.number.int({ max: 100, min: 0 }),
        Temperature: faker.number.int({ max: 100, min: 0 }),
      },
      {
        Alive: faker.datatype.boolean(),
        ArrayCurrent: faker.number.int({ max: 100, min: 0 }),
        ArrayVoltage: faker.number.int({ max: 100, min: 0 }),
        BatteryVoltage: faker.number.int({ max: 100, min: 0 }),
        Temperature: faker.number.int({ max: 100, min: 0 }),
      },
    ],
    MotorDetails: [
      {
        BackEmf: faker.number.int({ max: 100, min: 0 }),
        DcBusAmpHours: faker.number.int({ max: 100, min: 0 }),
        DspBoardTemp: faker.number.int({ max: 100, min: 0 }),
        HeatSinkTemp: faker.number.int({ max: 100, min: 0 }),
        MotorCurrentImaginary: faker.number.int({ max: 100, min: 0 }),
        MotorCurrentReal: faker.number.int({ max: 100, min: 0 }),
        MotorTemp: faker.number.int({ max: 100, min: 0 }),
        MotorVoltageImaginary: faker.number.int({ max: 100, min: 0 }),
        MotorVoltageReal: faker.number.int({ max: 100, min: 0 }),
        Odometer: faker.number.int({ max: 100, min: 0 }),
        PhaseBCurrent: faker.number.int({ max: 100, min: 0 }),
        PhaseCCurrent: faker.number.int({ max: 100, min: 0 }),
        SlipSpeed: faker.number.int({ max: 100, min: 0 }),
        VoltageRail15VSupply: faker.number.int({ max: 100, min: 0 }),
        VoltageRail1VSupply: faker.number.int({ max: 100, min: 0 }),
        VoltageRail3VSupply: faker.number.int({ max: 100, min: 0 }),
      },
      {
        BackEmf: faker.number.int({ max: 100, min: 0 }),
        DcBusAmpHours: faker.number.int({ max: 100, min: 0 }),
        DspBoardTemp: faker.number.int({ max: 100, min: 0 }),
        HeatSinkTemp: faker.number.int({ max: 100, min: 0 }),
        MotorCurrentImaginary: faker.number.int({ max: 100, min: 0 }),
        MotorCurrentReal: faker.number.int({ max: 100, min: 0 }),
        MotorTemp: faker.number.int({ max: 100, min: 0 }),
        MotorVoltageImaginary: faker.number.int({ max: 100, min: 0 }),
        MotorVoltageReal: faker.number.int({ max: 100, min: 0 }),
        Odometer: faker.number.int({ max: 100, min: 0 }),
        PhaseBCurrent: faker.number.int({ max: 100, min: 0 }),
        PhaseCCurrent: faker.number.int({ max: 100, min: 0 }),
        SlipSpeed: faker.number.int({ max: 100, min: 0 }),
        VoltageRail15VSupply: faker.number.int({ max: 100, min: 0 }),
        VoltageRail1VSupply: faker.number.int({ max: 100, min: 0 }),
        VoltageRail3VSupply: faker.number.int({ max: 100, min: 0 }),
      },
    ],
    MotorFaults: [
      {
        ErrorFlags: {
          BadMotorPositionHallSequence: faker.datatype.boolean(),
          ConfigReadError: faker.datatype.boolean(),
          DcBusOverVoltage: faker.datatype.boolean(),
          DesaturationFault: faker.datatype.boolean(),
          MotorOverSpeed: faker.datatype.boolean(),
          SoftwareOverCurrent: faker.datatype.boolean(),
          Wail15VUnderVoltageLockOut: faker.datatype.boolean(),
          WatchdogCausedLastReset: faker.datatype.boolean(),
        },
        LimitFlags: {
          BusCurrent: false,
          BusVoltageLower: faker.datatype.boolean(),
          BusVoltageUpper: faker.datatype.boolean(),
          IpmOrMotorTemperature: true,
          MotorCurrent: faker.datatype.boolean(),
          OutputVoltagePwm: faker.datatype.boolean(),
          Velocity: faker.datatype.boolean(),
        },
        RxErrorCount: faker.number.int({ max: 100, min: 0 }),
        TxErrorCount: faker.number.int({ max: 100, min: 0 }),
      },
      {
        ErrorFlags: {
          BadMotorPositionHallSequence: faker.datatype.boolean(),
          ConfigReadError: faker.datatype.boolean(),
          DcBusOverVoltage: faker.datatype.boolean(),
          DesaturationFault: faker.datatype.boolean(),
          MotorOverSpeed: faker.datatype.boolean(),
          SoftwareOverCurrent: faker.datatype.boolean(),
          Wail15VUnderVoltageLockOut: faker.datatype.boolean(),
          WatchdogCausedLastReset: faker.datatype.boolean(),
        },
        LimitFlags: {
          BusCurrent: false,
          BusVoltageLower: faker.datatype.boolean(),
          BusVoltageUpper: faker.datatype.boolean(),
          IpmOrMotorTemperature: true,
          MotorCurrent: faker.datatype.boolean(),
          OutputVoltagePwm: faker.datatype.boolean(),
          Velocity: faker.datatype.boolean(),
        },
        RxErrorCount: faker.number.int({ max: 100, min: 0 }),
        TxErrorCount: faker.number.int({ max: 100, min: 0 }),
      },
    ],
    PacketTitle: faker.lorem.words(2),
    TimeStamp: faker.date.soon().valueOf(),
  };
}
