import { faker } from "@faker-js/faker";
import { ITelemetryData } from "./types";

export function generateFakeTelemetryData(): ITelemetryData {
  return {
    B3: {
      Acceleration: faker.number.int({ max: 100, min: 0 }),
      BrakeLightSignalOut: faker.datatype.boolean(),
      BrakeSwitch: faker.datatype.boolean(),
      DaytimeRunningLightSignalOut: faker.datatype.boolean(),
      ForwardIn: faker.datatype.boolean(),
      ForwardSwitchIn: faker.datatype.boolean(),
      HandbrakeSwitch: faker.datatype.boolean(),
      HazardLightsIn: faker.datatype.boolean(),
      HeadightsSwitchIn: faker.datatype.boolean(),
      HeadlightSignalOut: faker.datatype.boolean(),
      HornSignalOut: faker.datatype.boolean(),
      HornSwitchIn: faker.datatype.boolean(),
      Lap: faker.datatype.boolean(),
      LeftSignalIn: faker.datatype.boolean(),
      LeftSignalOut: faker.datatype.boolean(),
      MotorReset: faker.datatype.boolean(),
      Neutral: faker.datatype.boolean(),
      RaceMode: faker.datatype.boolean(),
      RegenBraking: faker.number.int({ max: 100, min: 0 }),
      Reverse: faker.datatype.boolean(),
      RightSignalIn: faker.datatype.boolean(),
      RightSignalOut: faker.datatype.boolean(),
      ZoomZoom: faker.datatype.boolean(),
    },
    Battery: {
      AlwaysOnSignalStatus: faker.datatype.boolean(),
      AverageCellVoltage: faker.number.int({ max: 100, min: 0 }),
      AverageTemperature: faker.number.int({ max: 100, min: 0 }),
      BmuAlive: faker.number.int({ max: 100, min: 0 }),
      ChargeRelayEnabled: faker.datatype.boolean(),
      ChargerSafetyEnabled: faker.datatype.boolean(),
      DischargeRelayEnabled: faker.datatype.boolean(),
      FanSpeed: faker.number.int({ max: 100, min: 0 }),
      FanVoltage: faker.number.int({ max: 100, min: 0 }),
      HighCellVoltage: faker.number.int({ max: 100, min: 0 }),
      HighCellVoltageId: faker.number.int({ max: 100, min: 0 }),
      HighTemperature: faker.number.int({ max: 100, min: 0 }),
      HighThermistorId: faker.number.int({ max: 100, min: 0 }),
      Input12V: faker.number.int({ max: 100, min: 0 }),
      InternalTemperature: faker.number.int({ max: 100, min: 0 }),
      IsChargingSignalStatus: faker.datatype.boolean(),
      IsReadySignalStatus: faker.datatype.boolean(),
      LowCellVoltage: faker.number.int({ max: 100, min: 0 }),
      LowCellVoltageId: faker.number.int({ max: 100, min: 0 }),
      LowTemperature: faker.number.int({ max: 100, min: 0 }),
      LowThermistorId: faker.number.int({ max: 100, min: 0 }),
      MalfunctionIndicatorActive: faker.datatype.boolean(),
      MultiPurposeInputSignalStatus: faker.datatype.boolean(),
      PackAmphours: faker.number.int({ max: 100, min: 0 }),
      PackCurrent: faker.number.int({ max: 100, min: 0 }),
      PackDepthOfDischarge: faker.number.int({ max: 100, min: 0 }),
      PackStateOfCharge: faker.number.int({ max: 100, min: 0 }),
      PackVoltage: faker.number.int({ max: 100, min: 0 }),
      PopulatedCells: faker.number.int({ max: 100, min: 0 }),
      RequestedFanSpeed: faker.number.int({ max: 100, min: 0 }),
    },
    BatteryFaults: {
      AlwaysOnSupplyFault: faker.datatype.boolean(),
      CanbusCommunicationFault: faker.datatype.boolean(),
      CclReducedDueToAlternateCurrentLimit: faker.datatype.boolean(),
      CclReducedDueToChargerLatch: faker.datatype.boolean(),
      CclReducedDueToHighCellResistance: faker.datatype.boolean(),
      CclReducedDueToHighCellVoltage: faker.datatype.boolean(),
      CclReducedDueToHighPackVoltage: faker.datatype.boolean(),
      CclReducedDueToHighSoc: faker.datatype.boolean(),
      CclReducedDueToTemperature: faker.datatype.boolean(),
      ChargeLimitEnforcementFault: faker.datatype.boolean(),
      ChargerSafetyRelayFault: faker.datatype.boolean(),
      CurrentSensorFault: faker.datatype.boolean(),
      DclAndCclReducedDueToCommunicationFailsafe: faker.datatype.boolean(),
      DclAndCclReducedDueToVoltageFailsafe: faker.datatype.boolean(),
      DclReducedDueToHighCellResistance: faker.datatype.boolean(),
      DclReducedDueToLowCellVoltage: faker.datatype.boolean(),
      DclReducedDueToLowPackVoltage: faker.datatype.boolean(),
      DclReducedDueToLowSoc: faker.datatype.boolean(),
      DclReducedDueToTemperature: faker.datatype.boolean(),
      DischargeLimitEnforcementFault: faker.datatype.boolean(),
      FanMonitorFault: faker.datatype.boolean(),
      HighVoltageIsolationFault: faker.datatype.boolean(),
      InternalCommunicationFault: faker.datatype.boolean(),
      InternalConversionFault: faker.datatype.boolean(),
      InternalLogicFault: faker.datatype.boolean(),
      InternalMemoryFault: faker.datatype.boolean(),
      InternalThermistorFault: faker.datatype.boolean(),
      LowCellVoltageFault: faker.datatype.boolean(),
      OpenWiringFault: faker.datatype.boolean(),
      PackVoltageSensorFault: faker.datatype.boolean(),
      PowerSupply12VFault: faker.datatype.boolean(),
      ThermistorFault: faker.datatype.boolean(),
      VoltageRedundancyFault: faker.datatype.boolean(),
      WeakCellFault: faker.datatype.boolean(),
      WeakPackFault: faker.datatype.boolean(),
    },
    KeyMotor: {
      ControlMode: faker.datatype.boolean(),
      DebugMode: faker.datatype.boolean(),
      MotorMode: faker.datatype.boolean(),
      MotorSetpoint: faker.number.int({ max: 100, min: 0 }),
      SoftwareEnable: faker.datatype.boolean(),
    },
    MBMS: {
      AllowCharge: faker.datatype.boolean(),
      AllowDischarge: faker.datatype.boolean(),
      ArrayContactorError: faker.datatype.boolean(),
      ArrayContactorState: faker.datatype.boolean(),
      ArrayCurrent: faker.number.int({ max: 100, min: 0 }),
      ArrayHighTemperatureCurrentTrip: faker.datatype.boolean(),
      ArrayVoltage: faker.number.int({ max: 100, min: 0 }),
      AuxillaryBatteryVoltage: faker.number.int({ max: 100, min: 0 }),
      ChargeContactorError: faker.datatype.boolean(),
      ChargeContactorState: faker.datatype.boolean(),
      ChargeCurrent: faker.number.int({ max: 100, min: 0 }),
      ChargeHighTemperatureCurrentTrip: faker.datatype.boolean(),
      ChargeShouldTrip: faker.datatype.boolean(),
      ChargeVoltage: faker.number.int({ max: 100, min: 0 }),
      CommonContactorError: faker.datatype.boolean(),
      CommonContactorState: faker.datatype.boolean(),
      CommonCurrent: faker.number.int({ max: 100, min: 0 }),
      ContactorDisconnectedUnexpectedlyTrip: faker.datatype.boolean(),
      DischargeShouldTrip: faker.datatype.boolean(),
      HighCellVoltageTrip: faker.datatype.boolean(),
      HighCommonCurrentTrip: faker.datatype.boolean(),
      HighVoltageEnableState: faker.datatype.boolean(),
      LowCellVoltageTrip: faker.datatype.boolean(),
      LvContactorError: faker.datatype.boolean(),
      LvContactorState: faker.datatype.boolean(),
      LvCurrent: faker.number.int({ max: 100, min: 0 }),
      LvHighTemperatureCurrentTrip: faker.datatype.boolean(),
      LvVoltage: faker.number.int({ max: 100, min: 0 }),
      MotorContactorError: faker.datatype.boolean(),
      MotorContactorState: faker.datatype.boolean(),
      MotorCurrent: faker.number.int({ max: 100, min: 0 }),
      MotorHighTemperatureCurrentTrip: faker.datatype.boolean(),
      MotorVoltage: faker.number.int({ max: 100, min: 0 }),
      OrionCanReceivedRecently: faker.datatype.boolean(),
      OrionMessageTimeoutTrip: faker.datatype.boolean(),
      ProtectionTrip: faker.datatype.boolean(),
      StrobeBmsLight: faker.datatype.boolean(),
    },
    MPPT: [
      {
        ArrayCurrent: faker.number.int({ max: 100, min: 0 }),
        ArrayVoltage: faker.number.int({ max: 100, min: 0 }),
        BatteryVoltage: faker.number.int({ max: 100, min: 0 }),
        ChannelNumber: faker.number.int({ max: 3, min: 0 }),
        IsAlive: faker.number.int({ max: 1, min: 0 }),
        Temperature: faker.number.int({ max: 100, min: 0 }),
      },
      {
        ArrayCurrent: faker.number.int({ max: 100, min: 0 }),
        ArrayVoltage: faker.number.int({ max: 100, min: 0 }),
        BatteryVoltage: faker.number.int({ max: 100, min: 0 }),
        ChannelNumber: faker.number.int({ max: 3, min: 0 }),
        IsAlive: faker.number.int({ max: 1, min: 0 }),
        Temperature: faker.number.int({ max: 100, min: 0 }),
      },
      {
        ArrayCurrent: faker.number.int({ max: 100, min: 0 }),
        ArrayVoltage: faker.number.int({ max: 100, min: 0 }),
        BatteryVoltage: faker.number.int({ max: 100, min: 0 }),
        ChannelNumber: faker.number.int({ max: 3, min: 0 }),
        IsAlive: faker.number.int({ max: 1, min: 0 }),
        Temperature: faker.number.int({ max: 100, min: 0 }),
      },
      {
        ArrayCurrent: faker.number.int({ max: 100, min: 0 }),
        ArrayVoltage: faker.number.int({ max: 100, min: 0 }),
        BatteryVoltage: faker.number.int({ max: 100, min: 0 }),
        ChannelNumber: faker.number.int({ max: 3, min: 0 }),
        IsAlive: faker.number.int({ max: 1, min: 0 }),
        Temperature: faker.number.int({ max: 100, min: 0 }),
      },
    ],
    MotorDetails: [
      {
        AbsoluteAngle: faker.number.int({ max: 100, min: 0 }),
        CanCommsTimeoutError: faker.datatype.boolean(),
        CanCommsTimeoutWarning: faker.datatype.boolean(),
        CanSendError: faker.datatype.boolean(),
        CanSendWarning: faker.datatype.boolean(),
        ControlMode: faker.datatype.boolean(),
        ControlValue: faker.number.int({ max: 100, min: 0 }),
        ControllerDataReadingTimeout: faker.datatype.boolean(),
        CpuOverload: faker.datatype.boolean(),
        CpuTempTooHigh: faker.datatype.boolean(),
        CpuTemperatureVeryHigh: faker.datatype.boolean(),
        CurrentMotorPower: faker.number.int({ max: 100, min: 0 }),
        CurrentMotorTorque: faker.number.int({ max: 100, min: 0 }),
        CurrentRpmValue: faker.number.int({ max: 100, min: 0 }),
        DcOvervoltageError: faker.datatype.boolean(),
        DcOvervoltageWarning: faker.datatype.boolean(),
        DcUndervoltageError: faker.datatype.boolean(),
        DcUndervoltageWarning: faker.datatype.boolean(),
        DclinkTempTooHigh: faker.datatype.boolean(),
        DclinkTemperatureVeryHigh: faker.datatype.boolean(),
        DebugMode: faker.datatype.boolean(),
        DelayInDclinkCommunication: faker.datatype.boolean(),
        DelayInReadingPosSensor: faker.datatype.boolean(),
        DelayInReadingTempSensor: faker.datatype.boolean(),
        DoubleCanIdOnBus: faker.datatype.boolean(),
        ErrorInDclinkCommunication: faker.datatype.boolean(),
        ErrorReadingEncoder: faker.datatype.boolean(),
        ErrorReadingTempSensor: faker.datatype.boolean(),
        HallTempTooHigh: faker.datatype.boolean(),
        HallTemperatureVeryHigh: faker.datatype.boolean(),
        HwEnableNotSet: faker.datatype.boolean(),
        InitError: faker.datatype.boolean(),
        InvalidHallSector: faker.datatype.boolean(),
        InvalidHallSensorSequence: faker.datatype.boolean(),
        Inverter1FaultError: faker.datatype.boolean(),
        Inverter1FaultWarning: faker.datatype.boolean(),
        Inverter1OverCurrentWarning: faker.datatype.boolean(),
        Inverter1OvercurrentError: faker.datatype.boolean(),
        Inverter1TempTooHigh: faker.datatype.boolean(),
        Inverter1TempVeryHigh: faker.datatype.boolean(),
        Inverter2FaultError: faker.datatype.boolean(),
        Inverter2FaultWarning: faker.datatype.boolean(),
        Inverter2OverCurrentWarning: faker.datatype.boolean(),
        Inverter2OvercurrentError: faker.datatype.boolean(),
        Inverter2TempTooHigh: faker.datatype.boolean(),
        Inverter2TempVeryHigh: faker.datatype.boolean(),
        Inverter3FaultError: faker.datatype.boolean(),
        Inverter3FaultWarning: faker.datatype.boolean(),
        Inverter3OverCurrentWarning: faker.datatype.boolean(),
        Inverter3OvercurrentError: faker.datatype.boolean(),
        Inverter3TempTooHigh: faker.datatype.boolean(),
        Inverter3TempVeryHigh: faker.datatype.boolean(),
        Inverter4FaultError: faker.datatype.boolean(),
        Inverter4FaultWarning: faker.datatype.boolean(),
        Inverter4OverCurrentWarning: faker.datatype.boolean(),
        Inverter4OvercurrentError: faker.datatype.boolean(),
        Inverter4TempTooHigh: faker.datatype.boolean(),
        Inverter4TempVeryHigh: faker.datatype.boolean(),
        Inverter5FaultError: faker.datatype.boolean(),
        Inverter5FaultWarning: faker.datatype.boolean(),
        Inverter5OverCurrentWarning: faker.datatype.boolean(),
        Inverter5OvercurrentError: faker.datatype.boolean(),
        Inverter5TempTooHigh: faker.datatype.boolean(),
        Inverter5TempVeryHigh: faker.datatype.boolean(),
        Inverter6FaultError: faker.datatype.boolean(),
        Inverter6FaultWarning: faker.datatype.boolean(),
        Inverter6OverCurrentWarning: faker.datatype.boolean(),
        Inverter6OvercurrentError: faker.datatype.boolean(),
        Inverter6TempTooHigh: faker.datatype.boolean(),
        Inverter6TempVeryHigh: faker.datatype.boolean(),
        InverterPeakCurrent: faker.number.int({ max: 100, min: 0 }),
        LostFramesOnCanBusError: faker.datatype.boolean(),
        LostFramesOnCanBusWarning: faker.datatype.boolean(),
        MotorAboutToStall: faker.datatype.boolean(),
        MotorMode: faker.datatype.boolean(),
        MotorStalled: faker.datatype.boolean(),
        MotorTemperature: faker.number.int({ max: 100, min: 0 }),
        OverspeedError: faker.datatype.boolean(),
        OverspeedWarning: faker.datatype.boolean(),
        PositionSensorReadingError: faker.datatype.boolean(),
        SettingsNotFound: faker.datatype.boolean(),
        SoftwareEnable: faker.datatype.boolean(),
        StartAtHighRpm: faker.datatype.boolean(),
        TorqueLimited: faker.datatype.boolean(),
        ZeroPositionOffsetNotSet: faker.datatype.boolean(),
      },
      {
        AbsoluteAngle: faker.number.int({ max: 100, min: 0 }),
        CanCommsTimeoutError: faker.datatype.boolean(),
        CanCommsTimeoutWarning: faker.datatype.boolean(),
        CanSendError: faker.datatype.boolean(),
        CanSendWarning: faker.datatype.boolean(),
        ControlMode: faker.datatype.boolean(),
        ControlValue: faker.number.int({ max: 100, min: 0 }),
        ControllerDataReadingTimeout: faker.datatype.boolean(),
        CpuOverload: faker.datatype.boolean(),
        CpuTempTooHigh: faker.datatype.boolean(),
        CpuTemperatureVeryHigh: faker.datatype.boolean(),
        CurrentMotorPower: faker.number.int({ max: 100, min: 0 }),
        CurrentMotorTorque: faker.number.int({ max: 100, min: 0 }),
        CurrentRpmValue: faker.number.int({ max: 100, min: 0 }),
        DcOvervoltageError: faker.datatype.boolean(),
        DcOvervoltageWarning: faker.datatype.boolean(),
        DcUndervoltageError: faker.datatype.boolean(),
        DcUndervoltageWarning: faker.datatype.boolean(),
        DclinkTempTooHigh: faker.datatype.boolean(),
        DclinkTemperatureVeryHigh: faker.datatype.boolean(),
        DebugMode: faker.datatype.boolean(),
        DelayInDclinkCommunication: faker.datatype.boolean(),
        DelayInReadingPosSensor: faker.datatype.boolean(),
        DelayInReadingTempSensor: faker.datatype.boolean(),
        DoubleCanIdOnBus: faker.datatype.boolean(),
        ErrorInDclinkCommunication: faker.datatype.boolean(),
        ErrorReadingEncoder: faker.datatype.boolean(),
        ErrorReadingTempSensor: faker.datatype.boolean(),
        HallTempTooHigh: faker.datatype.boolean(),
        HallTemperatureVeryHigh: faker.datatype.boolean(),
        HwEnableNotSet: faker.datatype.boolean(),
        InitError: faker.datatype.boolean(),
        InvalidHallSector: faker.datatype.boolean(),
        InvalidHallSensorSequence: faker.datatype.boolean(),
        Inverter1FaultError: faker.datatype.boolean(),
        Inverter1FaultWarning: faker.datatype.boolean(),
        Inverter1OverCurrentWarning: faker.datatype.boolean(),
        Inverter1OvercurrentError: faker.datatype.boolean(),
        Inverter1TempTooHigh: faker.datatype.boolean(),
        Inverter1TempVeryHigh: faker.datatype.boolean(),
        Inverter2FaultError: faker.datatype.boolean(),
        Inverter2FaultWarning: faker.datatype.boolean(),
        Inverter2OverCurrentWarning: faker.datatype.boolean(),
        Inverter2OvercurrentError: faker.datatype.boolean(),
        Inverter2TempTooHigh: faker.datatype.boolean(),
        Inverter2TempVeryHigh: faker.datatype.boolean(),
        Inverter3FaultError: faker.datatype.boolean(),
        Inverter3FaultWarning: faker.datatype.boolean(),
        Inverter3OverCurrentWarning: faker.datatype.boolean(),
        Inverter3OvercurrentError: faker.datatype.boolean(),
        Inverter3TempTooHigh: faker.datatype.boolean(),
        Inverter3TempVeryHigh: faker.datatype.boolean(),
        Inverter4FaultError: faker.datatype.boolean(),
        Inverter4FaultWarning: faker.datatype.boolean(),
        Inverter4OverCurrentWarning: faker.datatype.boolean(),
        Inverter4OvercurrentError: faker.datatype.boolean(),
        Inverter4TempTooHigh: faker.datatype.boolean(),
        Inverter4TempVeryHigh: faker.datatype.boolean(),
        Inverter5FaultError: faker.datatype.boolean(),
        Inverter5FaultWarning: faker.datatype.boolean(),
        Inverter5OverCurrentWarning: faker.datatype.boolean(),
        Inverter5OvercurrentError: faker.datatype.boolean(),
        Inverter5TempTooHigh: faker.datatype.boolean(),
        Inverter5TempVeryHigh: faker.datatype.boolean(),
        Inverter6FaultError: faker.datatype.boolean(),
        Inverter6FaultWarning: faker.datatype.boolean(),
        Inverter6OverCurrentWarning: faker.datatype.boolean(),
        Inverter6OvercurrentError: faker.datatype.boolean(),
        Inverter6TempTooHigh: faker.datatype.boolean(),
        Inverter6TempVeryHigh: faker.datatype.boolean(),
        InverterPeakCurrent: faker.number.int({ max: 100, min: 0 }),
        LostFramesOnCanBusError: faker.datatype.boolean(),
        LostFramesOnCanBusWarning: faker.datatype.boolean(),
        MotorAboutToStall: faker.datatype.boolean(),
        MotorMode: faker.datatype.boolean(),
        MotorStalled: faker.datatype.boolean(),
        MotorTemperature: faker.number.int({ max: 100, min: 0 }),
        OverspeedError: faker.datatype.boolean(),
        OverspeedWarning: faker.datatype.boolean(),
        PositionSensorReadingError: faker.datatype.boolean(),
        SettingsNotFound: faker.datatype.boolean(),
        SoftwareEnable: faker.datatype.boolean(),
        StartAtHighRpm: faker.datatype.boolean(),
        TorqueLimited: faker.datatype.boolean(),
        ZeroPositionOffsetNotSet: faker.datatype.boolean(),
      },
    ],
    Pi: {
      rfid: faker.number.int({ max: 100, min: 0 }),
    },
    ProximitySensors: {
      ProximitySensor1: faker.number.int({ max: 100, min: 0 }),
      ProximitySensor2: faker.number.int({ max: 100, min: 0 }),
      ProximitySensor3: faker.number.int({ max: 100, min: 0 }),
      ProximitySensor4: faker.number.int({ max: 100, min: 0 }),
    },
    Telemetry: {
      GpsAdditionalFlags: faker.number.int({ max: 100, min: 0 }),
      GpsDay: faker.number.int({ max: 31, min: 1 }),
      GpsFixStatusFlags: faker.number.int({ max: 100, min: 0 }),
      GpsHour: faker.number.int({ max: 23, min: 0 }),
      GpsLatitude: faker.number.int({ max: 90, min: -90 }),
      GpsLongitude: faker.number.int({ max: 180, min: -180 }),
      GpsMinute: faker.number.int({ max: 59, min: 0 }),
      GpsMonth: faker.number.int({ max: 12, min: 1 }),
      GpsSecond: faker.number.int({ max: 59, min: 0 }),
      GpsValidityFlags: faker.number.int({ max: 100, min: 0 }),
      GpsYear: faker.number.int({ max: 2100, min: 2000 }),
      MpuAccelerationX: faker.number.int({ max: 100, min: -100 }),
      MpuAccelerationY: faker.number.int({ max: 100, min: -100 }),
      MpuAccelerationZ: faker.number.int({ max: 100, min: -100 }),
      MpuRotationX: faker.number.int({ max: 100, min: -100 }),
      MpuRotationY: faker.number.int({ max: 100, min: -100 }),
      MpuRotationZ: faker.number.int({ max: 100, min: -100 }),
      MpuTemperature: faker.number.int({ max: 85, min: -40 }),
    },
    TimeStamp: new Date().toISOString(),
    Title: "Helios",
  };
}
