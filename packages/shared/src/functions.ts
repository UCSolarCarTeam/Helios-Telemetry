import { faker } from "@faker-js/faker";
import { ITelemetryData, ITelemetryDataType, Coords } from "./types";
import { isRight } from "fp-ts/Either";
import { type ValidationError } from "io-ts";

export function generateFakeTelemetryData(): ITelemetryData {
  return {
    B3: {
      Acceleration: faker.number.int({ max: 100, min: 0 }),
      BrakeLightSignalOut: faker.datatype.boolean(),
      BrakeSwitch: faker.datatype.boolean(),
      DaytimeRunningLightSignalOut: faker.datatype.boolean(),
      ForwardIn: faker.datatype.boolean(),
      ForwardSwitchIn: faker.datatype.boolean(),
      HandbrakeSwitch: faker.datatype.boolean(),
      HazardLightsIn: faker.datatype.boolean(),
      HeadightsSwitchIn: faker.datatype.boolean(),
      HeadlightSignalOut: faker.datatype.boolean(),
      HornSignalOut: faker.datatype.boolean(),
      HornSwitchIn: faker.datatype.boolean(),
      Lap: faker.datatype.boolean(),
      LeftSignalIn: faker.datatype.boolean(),
      LeftSignalOut: faker.datatype.boolean(),
      MotorReset: faker.datatype.boolean(),
      Neutral: faker.datatype.boolean(),
      RaceMode: faker.datatype.boolean(),
      RegenBraking: faker.number.int({ max: 100, min: 0 }),
      Reverse: faker.datatype.boolean(),
      RightSignalIn: faker.datatype.boolean(),
      RightSignalOut: faker.datatype.boolean(),
      ZoomZoom: faker.datatype.boolean(),
    },
    Battery: {
      AlwaysOnSignalStatus: faker.datatype.boolean(),
      BatteryCell: {
        AverageCellVoltage: faker.number.int({ max: 100, min: 0 }),
        HighCellVoltage: faker.number.int({ max: 100, min: 0 }),
        HighCellVoltageId: faker.number.int({ max: 100, min: 0 }),
        LowCellVoltage: faker.number.int({ max: 100, min: 0 }),
        LowCellVoltageId: faker.number.int({ max: 100, min: 0 }),
        PopulatedCells: faker.number.int({ max: 100, min: 0 }),
      },
      BatteryFan: {
        FanSpeed: faker.number.int({ max: 100, min: 0 }),
        FanVoltage: faker.number.int({ max: 100, min: 0 }),
        RequestedFanSpeed: faker.number.int({ max: 100, min: 0 }),
      },
      BatteryPack: {
        Input12V: faker.number.int({ max: 100, min: 0 }),
        PackAmphours: faker.number.int({ max: 100, min: 0 }),
        PackCurrent: faker.number.int({ max: 100, min: 0 }),
        PackDepthOfDischarge: faker.number.int({ max: 100, min: 0 }),
        PackStateOfCharge: faker.number.int({ max: 100, min: 0 }),
        PackVoltage: faker.number.int({ max: 100, min: 0 }),
      },
      BatteryTemperature: {
        AverageTemperature: faker.number.int({ max: 100, min: -40 }),
        HighTemperature: faker.number.int({ max: 100, min: -40 }),
        InternalTemperature: faker.number.int({ max: 100, min: -40 }),
        LowTemperature: faker.number.int({ max: 100, min: -40 }),
      },
      BmuAlive: faker.number.int({ max: 1, min: 0 }),
      ChargeRelayEnabled: faker.datatype.boolean(),
      ChargerSafetyEnabled: faker.datatype.boolean(),
      DischargeRelayEnabled: faker.datatype.boolean(),
      HighThermistorId: faker.number.int({ max: 100, min: 0 }),
      IsChargingSignalStatus: faker.datatype.boolean(),
      IsReadySignalStatus: faker.datatype.boolean(),
      LowThermistorId: faker.number.int({ max: 100, min: 0 }),
      MalfunctionIndicatorActive: faker.datatype.boolean(),
      MultiPurposeInputSignalStatus: faker.datatype.boolean(),
    },
    BatteryFaults: {
      Errors: {
        AlwaysOnSupplyFault: faker.datatype.boolean({ probability: 0.01 }),
        CanbusCommunicationFault: faker.datatype.boolean({ probability: 0.01 }),
        ChargeLimitEnforcementFault: faker.datatype.boolean({
          probability: 0.01,
        }),
        ChargerSafetyRelayFault: faker.datatype.boolean({ probability: 0.01 }),
        CurrentSensorFault: faker.datatype.boolean({ probability: 0.01 }),
        DischargeLimitEnforcementFault: faker.datatype.boolean({
          probability: 0.01,
        }),
        FanMonitorFault: faker.datatype.boolean({ probability: 0.01 }),
        HighVoltageIsolationFault: faker.datatype.boolean({
          probability: 0.01,
        }),
        InternalCommunicationFault: faker.datatype.boolean({
          probability: 0.01,
        }),
        InternalConversionFault: faker.datatype.boolean({ probability: 0.01 }),
        InternalLogicFault: faker.datatype.boolean({ probability: 0.01 }),
        InternalMemoryFault: faker.datatype.boolean({ probability: 0.01 }),
        InternalThermistorFault: faker.datatype.boolean({ probability: 0.01 }),
        LowCellVoltageFault: faker.datatype.boolean({ probability: 0.01 }),
        OpenWiringFault: faker.datatype.boolean({ probability: 0.01 }),
        PackVoltageSensorFault: faker.datatype.boolean({ probability: 0.01 }),
        PowerSupply12VFault: faker.datatype.boolean({ probability: 0.01 }),
        ThermistorFault: faker.datatype.boolean({ probability: 0.01 }),
        VoltageRedundancyFault: faker.datatype.boolean({ probability: 0.01 }),
        WeakCellFault: faker.datatype.boolean({ probability: 0.01 }),
        WeakPackFault: faker.datatype.boolean({ probability: 0.01 }),
      },
      Warnings: {
        CclReducedDueToAlternateCurrentLimit: faker.datatype.boolean({
          probability: 0.01,
        }),
        CclReducedDueToChargerLatch: faker.datatype.boolean({
          probability: 0.01,
        }),
        CclReducedDueToHighCellResistance: faker.datatype.boolean({
          probability: 0.01,
        }),
        CclReducedDueToHighCellVoltage: faker.datatype.boolean({
          probability: 0.01,
        }),
        CclReducedDueToHighPackVoltage: faker.datatype.boolean({
          probability: 0.01,
        }),
        CclReducedDueToHighSoc: faker.datatype.boolean({ probability: 0.01 }),
        CclReducedDueToTemperature: faker.datatype.boolean({
          probability: 0.01,
        }),
        DclAndCclReducedDueToCommunicationFailsafe: faker.datatype.boolean({
          probability: 0.01,
        }),
        DclAndCclReducedDueToVoltageFailsafe: faker.datatype.boolean({
          probability: 0.01,
        }),
        DclReducedDueToHighCellResistance: faker.datatype.boolean({
          probability: 0.01,
        }),
        DclReducedDueToLowCellVoltage: faker.datatype.boolean({
          probability: 0.01,
        }),
        DclReducedDueToLowPackVoltage: faker.datatype.boolean({
          probability: 0.01,
        }),
        DclReducedDueToLowSoc: faker.datatype.boolean({ probability: 0.01 }),
        DclReducedDueToTemperature: faker.datatype.boolean({
          probability: 0.01,
        }),
      },
    },
    KeyMotor: {
      ControlMode: faker.datatype.boolean(),
      DebugMode: faker.datatype.boolean(),
      MotorMode: faker.datatype.boolean(),
      MotorSetpoint: faker.number.int({ max: 100, min: 0 }),
      SoftwareEnable: faker.datatype.boolean(),
    },
    MBMS: {
      AllowCharge: faker.datatype.boolean(),
      AllowDischarge: faker.datatype.boolean(),
      ArrayContactorError: faker.datatype.boolean(),
      ArrayContactorState: faker.datatype.boolean(),
      ArrayCurrent: faker.number.int({ max: 100, min: 0 }),
      ArrayHighTemperatureCurrentTrip: faker.datatype.boolean(),
      ArrayVoltage: faker.number.int({ max: 100, min: 0 }),
      AuxillaryBatteryVoltage: faker.number.int({ max: 100, min: 0 }),
      ChargeContactorError: faker.datatype.boolean(),
      ChargeContactorState: faker.datatype.boolean(),
      ChargeCurrent: faker.number.int({ max: 100, min: 0 }),
      ChargeHighTemperatureCurrentTrip: faker.datatype.boolean(),
      ChargeShouldTrip: faker.datatype.boolean(),
      ChargeVoltage: faker.number.int({ max: 100, min: 0 }),
      CommonContactorError: faker.datatype.boolean(),
      CommonContactorState: faker.datatype.boolean(),
      CommonCurrent: faker.number.int({ max: 100, min: 0 }),
      ContactorDisconnectedUnexpectedlyTrip: faker.datatype.boolean(),
      DischargeShouldTrip: faker.datatype.boolean(),
      HighCellVoltageTrip: faker.datatype.boolean(),
      HighCommonCurrentTrip: faker.datatype.boolean(),
      HighVoltageEnableState: faker.datatype.boolean(),
      LowCellVoltageTrip: faker.datatype.boolean(),
      LvContactorError: faker.datatype.boolean(),
      LvContactorState: faker.datatype.boolean(),
      LvCurrent: faker.number.int({ max: 100, min: 0 }),
      LvHighTemperatureCurrentTrip: faker.datatype.boolean(),
      LvVoltage: faker.number.int({ max: 100, min: 0 }),
      MotorContactorError: faker.datatype.boolean(),
      MotorContactorState: faker.datatype.boolean(),
      MotorCurrent: faker.number.int({ max: 100, min: 0 }),
      MotorHighTemperatureCurrentTrip: faker.datatype.boolean(),
      MotorVoltage: faker.number.int({ max: 100, min: 0 }),
      OrionCanReceivedRecently: faker.datatype.boolean(),
      OrionMessageTimeoutTrip: faker.datatype.boolean(),
      ProtectionTrip: faker.datatype.boolean(),
      StrobeBmsLight: faker.datatype.boolean(),
    },
    MPPT0: {
      ArrayCurrent: faker.number.int({ max: 100, min: 0 }),
      ArrayVoltage: faker.number.int({ max: 100, min: 0 }),
      BatteryVoltage: faker.number.int({ max: 100, min: 0 }),
      ChannelNumber: faker.number.int({ max: 100, min: 0 }),
      IsAlive: faker.datatype.boolean(),
      Temperature: faker.number.int({ max: 100, min: 0 }),
    },
    MPPT1: {
      ArrayCurrent: faker.number.int({ max: 100, min: 0 }),
      ArrayVoltage: faker.number.int({ max: 100, min: 0 }),
      BatteryVoltage: faker.number.int({ max: 100, min: 0 }),
      ChannelNumber: faker.number.int({ max: 100, min: 0 }),
      IsAlive: faker.datatype.boolean(),
      Temperature: faker.number.int({ max: 100, min: 0 }),
    },
    MPPT2: {
      ArrayCurrent: faker.number.int({ max: 100, min: 0 }),
      ArrayVoltage: faker.number.int({ max: 100, min: 0 }),
      BatteryVoltage: faker.number.int({ max: 100, min: 0 }),
      ChannelNumber: faker.number.int({ max: 100, min: 0 }),
      IsAlive: faker.datatype.boolean(),
      Temperature: faker.number.int({ max: 100, min: 0 }),
    },
    MPPT3: {
      ArrayCurrent: faker.number.int({ max: 100, min: 0 }),
      ArrayVoltage: faker.number.int({ max: 100, min: 0 }),
      BatteryVoltage: faker.number.int({ max: 100, min: 0 }),
      ChannelNumber: faker.number.int({ max: 100, min: 0 }),
      IsAlive: faker.datatype.boolean(),
      Temperature: faker.number.int({ max: 100, min: 0 }),
    },

    MotorDetails0: {
      AbsoluteAngle: faker.number.int({ max: 360, min: 0 }),
      ControlMode: faker.datatype.boolean(),
      ControlValue: faker.number.int({ max: 100, min: 0 }),
      CurrentMotorPower: faker.number.int({ max: 100, min: 0 }),
      CurrentMotorTorque: faker.number.int({ max: 100, min: 0 }),
      CurrentRpmValue: faker.number.int({ max: 5000, min: 0 }),
      DebugMode: faker.datatype.boolean(),
      InverterPeakCurrent: faker.number.int({ max: 500, min: 0 }),
      MotorErrors: {
        CanCommsTimeoutError: faker.datatype.boolean({ probability: 0.01 }),
        CanSendError: faker.datatype.boolean(),
        ControllerDataReadingTimeout: faker.datatype.boolean({
          probability: 0.01,
        }),
        CpuOverload: faker.datatype.boolean(),
        CpuTempTooHigh: faker.datatype.boolean(),
        DcOvervoltageError: faker.datatype.boolean({ probability: 0.01 }),
        DcUndervoltageError: faker.datatype.boolean({ probability: 0.01 }),
        DclinkTempTooHigh: faker.datatype.boolean(),
        DoubleCanIdOnBus: faker.datatype.boolean(),
        ErrorInDclinkCommunication: faker.datatype.boolean({
          probability: 0.01,
        }),
        ErrorReadingEncoder: faker.datatype.boolean({ probability: 0.01 }),
        ErrorReadingTempSensor: faker.datatype.boolean({ probability: 0.01 }),
        HallTempTooHigh: faker.datatype.boolean(),
        HwEnableNotSet: faker.datatype.boolean(),
        InitError: faker.datatype.boolean(),
        InvalidHallSector: faker.datatype.boolean(),
        InvalidHallSensorSequence: faker.datatype.boolean({
          probability: 0.01,
        }),
        Inverter1FaultError: faker.datatype.boolean({ probability: 0.01 }),
        Inverter1OvercurrentError: faker.datatype.boolean({
          probability: 0.01,
        }),
        Inverter1TempTooHigh: faker.datatype.boolean(),
        Inverter2FaultError: faker.datatype.boolean({ probability: 0.01 }),
        Inverter2OvercurrentError: faker.datatype.boolean({
          probability: 0.01,
        }),
        Inverter2TempTooHigh: faker.datatype.boolean(),
        Inverter3FaultError: faker.datatype.boolean({ probability: 0.01 }),
        Inverter3OvercurrentError: faker.datatype.boolean({
          probability: 0.01,
        }),
        Inverter3TempTooHigh: faker.datatype.boolean(),
        Inverter4FaultError: faker.datatype.boolean({ probability: 0.01 }),
        Inverter4OvercurrentError: faker.datatype.boolean({
          probability: 0.01,
        }),
        Inverter4TempTooHigh: faker.datatype.boolean(),
        Inverter5FaultError: faker.datatype.boolean({ probability: 0.01 }),
        Inverter5OvercurrentError: faker.datatype.boolean({
          probability: 0.01,
        }),
        Inverter5TempTooHigh: faker.datatype.boolean(),
        Inverter6FaultError: faker.datatype.boolean({ probability: 0.01 }),
        Inverter6OvercurrentError: faker.datatype.boolean({
          probability: 0.01,
        }),
        Inverter6TempTooHigh: faker.datatype.boolean(),
        LostFramesOnCanBusError: faker.datatype.boolean({ probability: 0.01 }),
        MotorStalled: faker.datatype.boolean(),
        OverspeedError: faker.datatype.boolean({ probability: 0.01 }),
        PositionSensorReadingError: faker.datatype.boolean({
          probability: 0.01,
        }),
        SettingsNotFound: faker.datatype.boolean(),
        ZeroPositionOffsetNotSet: faker.datatype.boolean(),
      },
      MotorMode: faker.datatype.boolean(),
      MotorTemperature: faker.number.int({ max: 150, min: -40 }),
      MotorWarnings: {
        CanCommsTimeoutWarning: faker.datatype.boolean({ probability: 0.01 }),
        CanSendWarning: faker.datatype.boolean(),
        CpuOverload: faker.datatype.boolean(),
        CpuTemperatureVeryHigh: faker.datatype.boolean(),
        DcOvervoltageWarning: faker.datatype.boolean({ probability: 0.01 }),
        DcUndervoltageWarning: faker.datatype.boolean({ probability: 0.01 }),
        DclinkTemperatureVeryHigh: faker.datatype.boolean(),
        DelayInDclinkCommunication: faker.datatype.boolean(),
        DelayInReadingPosSensor: faker.datatype.boolean(),
        DelayInReadingTempSensor: faker.datatype.boolean(),
        HallTemperatureVeryHigh: faker.datatype.boolean(),
        Inverter1FaultWarning: faker.datatype.boolean({ probability: 0.01 }),
        Inverter1OverCurrentWarning: faker.datatype.boolean({
          probability: 0.01,
        }),
        Inverter1TempVeryHigh: faker.datatype.boolean(),
        Inverter2FaultWarning: faker.datatype.boolean({ probability: 0.01 }),
        Inverter2OverCurrentWarning: faker.datatype.boolean({
          probability: 0.01,
        }),
        Inverter2TempVeryHigh: faker.datatype.boolean(),
        Inverter3FaultWarning: faker.datatype.boolean({ probability: 0.01 }),
        Inverter3OverCurrentWarning: faker.datatype.boolean({
          probability: 0.01,
        }),
        Inverter3TempVeryHigh: faker.datatype.boolean(),
        Inverter4FaultWarning: faker.datatype.boolean({ probability: 0.01 }),
        Inverter4OverCurrentWarning: faker.datatype.boolean({
          probability: 0.01,
        }),
        Inverter4TempVeryHigh: faker.datatype.boolean(),
        Inverter5FaultWarning: faker.datatype.boolean({ probability: 0.01 }),
        Inverter5OverCurrentWarning: faker.datatype.boolean({
          probability: 0.01,
        }),
        Inverter5TempVeryHigh: faker.datatype.boolean(),
        Inverter6FaultWarning: faker.datatype.boolean({ probability: 0.01 }),
        Inverter6OverCurrentWarning: faker.datatype.boolean({
          probability: 0.01,
        }),
        Inverter6TempVeryHigh: faker.datatype.boolean(),
        LostFramesOnCanBusWarning: faker.datatype.boolean({
          probability: 0.01,
        }),
        MotorAboutToStall: faker.datatype.boolean(),
        OverspeedWarning: faker.datatype.boolean({ probability: 0.01 }),
        StartAtHighRpm: faker.datatype.boolean(),
        TorqueLimited: faker.datatype.boolean(),
      },
      SoftwareEnable: faker.datatype.boolean(),
    },
    MotorDetails1: {
      AbsoluteAngle: faker.number.int({ max: 360, min: 0 }),
      ControlMode: faker.datatype.boolean(),
      ControlValue: faker.number.int({ max: 100, min: 0 }),
      CurrentMotorPower: faker.number.int({ max: 100, min: 0 }),
      CurrentMotorTorque: faker.number.int({ max: 100, min: 0 }),
      CurrentRpmValue: faker.number.int({ max: 5000, min: 0 }),
      DebugMode: faker.datatype.boolean(),
      InverterPeakCurrent: faker.number.int({ max: 500, min: 0 }),
      MotorErrors: {
        CanCommsTimeoutError: faker.datatype.boolean({ probability: 0.01 }),
        CanSendError: faker.datatype.boolean(),
        ControllerDataReadingTimeout: faker.datatype.boolean({
          probability: 0.01,
        }),
        CpuOverload: faker.datatype.boolean(),
        CpuTempTooHigh: faker.datatype.boolean(),
        DcOvervoltageError: faker.datatype.boolean({ probability: 0.01 }),
        DcUndervoltageError: faker.datatype.boolean({ probability: 0.01 }),
        DclinkTempTooHigh: faker.datatype.boolean(),
        DoubleCanIdOnBus: faker.datatype.boolean(),
        ErrorInDclinkCommunication: faker.datatype.boolean({
          probability: 0.01,
        }),
        ErrorReadingEncoder: faker.datatype.boolean({ probability: 0.01 }),
        ErrorReadingTempSensor: faker.datatype.boolean({ probability: 0.01 }),
        HallTempTooHigh: faker.datatype.boolean(),
        HwEnableNotSet: faker.datatype.boolean(),
        InitError: faker.datatype.boolean(),
        InvalidHallSector: faker.datatype.boolean(),
        InvalidHallSensorSequence: faker.datatype.boolean({
          probability: 0.01,
        }),
        Inverter1FaultError: faker.datatype.boolean({ probability: 0.01 }),
        Inverter1OvercurrentError: faker.datatype.boolean({
          probability: 0.01,
        }),
        Inverter1TempTooHigh: faker.datatype.boolean(),
        Inverter2FaultError: faker.datatype.boolean({ probability: 0.01 }),
        Inverter2OvercurrentError: faker.datatype.boolean({
          probability: 0.01,
        }),
        Inverter2TempTooHigh: faker.datatype.boolean(),
        Inverter3FaultError: faker.datatype.boolean({ probability: 0.01 }),
        Inverter3OvercurrentError: faker.datatype.boolean({
          probability: 0.01,
        }),
        Inverter3TempTooHigh: faker.datatype.boolean(),
        Inverter4FaultError: faker.datatype.boolean({ probability: 0.01 }),
        Inverter4OvercurrentError: faker.datatype.boolean({
          probability: 0.01,
        }),
        Inverter4TempTooHigh: faker.datatype.boolean(),
        Inverter5FaultError: faker.datatype.boolean({ probability: 0.01 }),
        Inverter5OvercurrentError: faker.datatype.boolean({
          probability: 0.01,
        }),
        Inverter5TempTooHigh: faker.datatype.boolean(),
        Inverter6FaultError: faker.datatype.boolean({ probability: 0.01 }),
        Inverter6OvercurrentError: faker.datatype.boolean({
          probability: 0.01,
        }),
        Inverter6TempTooHigh: faker.datatype.boolean(),
        LostFramesOnCanBusError: faker.datatype.boolean({ probability: 0.01 }),
        MotorStalled: faker.datatype.boolean(),
        OverspeedError: faker.datatype.boolean({ probability: 0.01 }),
        PositionSensorReadingError: faker.datatype.boolean({
          probability: 0.01,
        }),
        SettingsNotFound: faker.datatype.boolean(),
        ZeroPositionOffsetNotSet: faker.datatype.boolean(),
      },
      MotorMode: faker.datatype.boolean(),
      MotorTemperature: faker.number.int({ max: 150, min: -40 }),
      MotorWarnings: {
        CanCommsTimeoutWarning: faker.datatype.boolean({ probability: 0.01 }),
        CanSendWarning: faker.datatype.boolean(),
        CpuOverload: faker.datatype.boolean(),
        CpuTemperatureVeryHigh: faker.datatype.boolean(),
        DcOvervoltageWarning: faker.datatype.boolean({ probability: 0.01 }),
        DcUndervoltageWarning: faker.datatype.boolean({ probability: 0.01 }),
        DclinkTemperatureVeryHigh: faker.datatype.boolean(),
        DelayInDclinkCommunication: faker.datatype.boolean(),
        DelayInReadingPosSensor: faker.datatype.boolean(),
        DelayInReadingTempSensor: faker.datatype.boolean(),
        HallTemperatureVeryHigh: faker.datatype.boolean(),
        Inverter1FaultWarning: faker.datatype.boolean({ probability: 0.01 }),
        Inverter1OverCurrentWarning: faker.datatype.boolean({
          probability: 0.01,
        }),
        Inverter1TempVeryHigh: faker.datatype.boolean(),
        Inverter2FaultWarning: faker.datatype.boolean({ probability: 0.01 }),
        Inverter2OverCurrentWarning: faker.datatype.boolean({
          probability: 0.01,
        }),
        Inverter2TempVeryHigh: faker.datatype.boolean(),
        Inverter3FaultWarning: faker.datatype.boolean({ probability: 0.01 }),
        Inverter3OverCurrentWarning: faker.datatype.boolean({
          probability: 0.01,
        }),
        Inverter3TempVeryHigh: faker.datatype.boolean(),
        Inverter4FaultWarning: faker.datatype.boolean({ probability: 0.01 }),
        Inverter4OverCurrentWarning: faker.datatype.boolean({
          probability: 0.01,
        }),
        Inverter4TempVeryHigh: faker.datatype.boolean(),
        Inverter5FaultWarning: faker.datatype.boolean({ probability: 0.01 }),
        Inverter5OverCurrentWarning: faker.datatype.boolean({
          probability: 0.01,
        }),
        Inverter5TempVeryHigh: faker.datatype.boolean(),
        Inverter6FaultWarning: faker.datatype.boolean({ probability: 0.01 }),
        Inverter6OverCurrentWarning: faker.datatype.boolean({
          probability: 0.01,
        }),
        Inverter6TempVeryHigh: faker.datatype.boolean(),
        LostFramesOnCanBusWarning: faker.datatype.boolean({
          probability: 0.01,
        }),
        MotorAboutToStall: faker.datatype.boolean(),
        OverspeedWarning: faker.datatype.boolean({ probability: 0.01 }),
        StartAtHighRpm: faker.datatype.boolean(),
        TorqueLimited: faker.datatype.boolean(),
      },
      SoftwareEnable: faker.datatype.boolean(),
    },
    Pi: {
      rfid: faker.number.int({ max: 100, min: 0 }),
    },
    ProximitySensors: {
      ProximitySensor1: faker.number.int({ max: 100, min: 0 }),
      ProximitySensor2: faker.number.int({ max: 100, min: 0 }),
      ProximitySensor3: faker.number.int({ max: 100, min: 0 }),
      ProximitySensor4: faker.number.int({ max: 100, min: 0 }),
    },
    Telemetry: {
      GpsAdditionalFlags: faker.number.int({ max: 255, min: 0 }),
      GpsDay: faker.number.int({ max: 31, min: 1 }),
      GpsFixStatusFlags: faker.number.int({ max: 255, min: 0 }),
      GpsHour: faker.number.int({ max: 23, min: 0 }),
      GpsLatitude: faker.location.latitude(),
      GpsLongitude: faker.location.longitude(),
      GpsMinute: faker.number.int({ max: 59, min: 0 }),
      GpsMonth: faker.number.int({ max: 12, min: 1 }),
      GpsSecond: faker.number.int({ max: 59, min: 0 }),
      GpsValidityFlags: faker.number.int({ max: 255, min: 0 }),
      GpsYear: faker.number.int({ max: 2100, min: 2000 }),
      MpuAccelerationX: faker.number.float({
        max: 16,
        min: -16,
      }),
      MpuAccelerationY: faker.number.float({
        max: 16,
        min: -16,
      }),
      MpuAccelerationZ: faker.number.float({
        max: 16,
        min: -16,
      }),
      MpuRotationX: faker.number.float({
        max: 2000,
        min: -2000,
      }),
      MpuRotationY: faker.number.float({
        max: 2000,
        min: -2000,
      }),
      MpuRotationZ: faker.number.float({
        max: 2000,
        min: -2000,
      }),
      MpuTemperature: faker.number.float({ max: 85, min: -40 }),
    },
    TimeStamp: faker.date.recent().getTime(),
    Title: faker.lorem.words(2),
  };
}

function formatValidationErrors(errors: ValidationError[]): string {
  return errors
    .map((error) => {
      const path = error.context
        .map(({ key }) => key)
        .filter(Boolean)
        .join(".");
      const expectedType =
        error.context[error.context.length - 1]?.type.name ??
        "error getting expected type";
      const actualValue = JSON.stringify(error.value);
      return `An invalid value of ${actualValue} was supplied to ${path} (expected type: ${expectedType}). Hint: if you received a value of undefined, it is likely the field is missing from the packet`;
    })
    .join(", ");
}

export function validateTelemetryData(packet: unknown) {
  const validationResult = ITelemetryDataType.decode(packet);
  if (isRight(validationResult)) {
    return validationResult.right;
  }
  const errorMessages = formatValidationErrors(validationResult.left);
  throw new Error(errorMessages);
}

const RANDOM_TRACK = [
  [-87.030258154, 36.017031833],
  [-87.029571508, 36.016531833],
  [-87.028884863, 36.016031833],
  [-87.028198217, 36.015531833],
  [-87.027511572, 36.015031833],
  [-87.026824926, 36.014531833],
  [-87.026138281, 36.014031833],
  [-87.025451635, 36.013531833],
  [-87.02476499, 36.013031833],
  [-87.024078344, 36.012531833],
  [-87.023391699, 36.012031833],
  [-87.022705053, 36.011531833],
  [-87.022018408, 36.011031833],
  [-87.021331762, 36.010531833],
  [-87.020645117, 36.010031833],
  [-87.019958471, 36.009531833],
  [-87.019271826, 36.009031833],
  [-87.01858518, 36.008531833],
  [-87.017898535, 36.008031833],
  [-87.017211889, 36.007531833],
  [-87.016525244, 36.007031833],
  [-87.015838598, 36.006531833],
  [-87.015151953, 36.006031833],
  [-87.014465307, 36.005531833],
  [-87.013778662, 36.005031833],
  [-87.013092016, 36.004531833],
  [-87.012405371, 36.004031833],
  [-87.011718725, 36.003531833],
  [-87.01103208, 36.003031833],
  [-87.010345434, 36.002531833],
  [-87.009658789, 36.002031833],
  [-87.008972143, 36.001531833],
  [-87.008285498, 36.001031833],
  [-87.007598852, 36.000531833],
  [-87.006912207, 36.000031833],
  [-87.006225561, 35.999531833],
  [-87.005538916, 35.999031833],
  [-87.00485227, 35.998531833],
  [-87.004165625, 35.998031833],
  [-87.003478979, 35.997531833],
  [-87.002792334, 35.997031833],
  [-87.002105688, 35.996531833],
  [-87.001419043, 35.996031833],
  [-87.000732397, 35.995531833],
  [-87.000045752, 35.995031833],
  [-86.999359106, 35.994531833],
  [-86.998672461, 35.994031833],
  [-86.997985815, 35.993531833],
  [-86.99729917, 35.993031833],
  [-86.996612524, 35.992531833],
  [-86.995925879, 35.992031833],
  [-86.995239233, 35.991531833],
  [-86.994552588, 35.991031833],
  [-86.993865942, 35.990531833],
  [-86.993179297, 35.990031833],
  [-86.992492651, 35.989531833],
  [-86.991806006, 35.989031833],
  [-86.99111936, 35.988531833],
  [-86.990432715, 35.988031833],
  [-86.989746069, 35.987531833],
  [-86.989059424, 35.987031833],
  [-86.988372778, 35.986531833],
  [-86.987686133, 35.986031833],
  [-86.987793421, 35.988754046],
  [-86.983587717, 35.990351343],
  [-86.980068659, 35.991670824],
  [-86.977837061, 35.994031947],
  [-86.975862955, 35.9979207],
  [-86.975948786, 36.001670388],
  [-86.977322077, 36.005905933],
  [-86.97663543, 36.010280108],
  [-86.97903869, 36.011876968],
  [-86.981356118, 36.014306912],
  [-86.982471918, 36.017673996],
  [-86.980068658, 36.020312022],
  [-86.977150415, 36.021457454],
  [-86.974961732, 36.022811124],
  [-86.974918817, 36.024893649],
  [-86.974489664, 36.027982625],
  [-86.975648378, 36.030238542],
  [-86.976678346, 36.033396719],
  [-86.979467844, 36.034646072],
  [-86.982686494, 36.033951989],
  [-86.986291383, 36.032806739],
  [-86.990368341, 36.03204323],
  [-86.99397323, 36.031175597],
  [-86.997535203, 36.029960895],
  [-87.003972505, 36.028468521],
  [-87.011010622, 36.02721907],
  [-87.021052811, 36.026455506],
  [-87.025902245, 36.022602869],
  [-87.02761886, 36.020242603],
  [-87.030258154, 36.017031833],
];

let trackIndex = 0;

export function generateRealisticTelemetryData(): ITelemetryData {
  const [longitude, latitude] = RANDOM_TRACK[trackIndex];
  trackIndex = (trackIndex + 1) % RANDOM_TRACK.length;

  return {
    B3: {
      Acceleration: faker.number.int({ max: 100, min: 0 }),
      BrakeLightSignalOut: faker.datatype.boolean(),
      BrakeSwitch: faker.datatype.boolean(),
      DaytimeRunningLightSignalOut: faker.datatype.boolean(),
      ForwardIn: faker.datatype.boolean(),
      ForwardSwitchIn: faker.datatype.boolean(),
      HandbrakeSwitch: faker.datatype.boolean(),
      HazardLightsIn: faker.datatype.boolean(),
      HeadightsSwitchIn: faker.datatype.boolean(),
      HeadlightSignalOut: faker.datatype.boolean(),
      HornSignalOut: faker.datatype.boolean(),
      HornSwitchIn: faker.datatype.boolean(),
      Lap: faker.datatype.boolean(),
      LeftSignalIn: faker.datatype.boolean(),
      LeftSignalOut: faker.datatype.boolean(),
      MotorReset: faker.datatype.boolean(),
      Neutral: faker.datatype.boolean(),
      RaceMode: faker.datatype.boolean(),
      RegenBraking: faker.number.int({ max: 100, min: 0 }),
      Reverse: faker.datatype.boolean(),
      RightSignalIn: faker.datatype.boolean(),
      RightSignalOut: faker.datatype.boolean(),
      ZoomZoom: faker.datatype.boolean(),
    },
    Battery: {
      AlwaysOnSignalStatus: faker.datatype.boolean(),
      BatteryCell: {
        AverageCellVoltage: faker.number.int({ max: 100, min: 0 }),
        HighCellVoltage: faker.number.int({ max: 100, min: 0 }),
        HighCellVoltageId: faker.number.int({ max: 100, min: 0 }),
        LowCellVoltage: faker.number.int({ max: 100, min: 0 }),
        LowCellVoltageId: faker.number.int({ max: 100, min: 0 }),
        PopulatedCells: faker.number.int({ max: 100, min: 0 }),
      },
      BatteryFan: {
        FanSpeed: faker.number.int({ max: 100, min: 0 }),
        FanVoltage: faker.number.int({ max: 100, min: 0 }),
        RequestedFanSpeed: faker.number.int({ max: 100, min: 0 }),
      },
      BatteryPack: {
        Input12V: faker.number.int({ max: 100, min: 0 }),
        PackAmphours: faker.number.int({ max: 100, min: 0 }),
        PackCurrent: faker.number.int({ max: 100, min: 0 }),
        PackDepthOfDischarge: faker.number.int({ max: 100, min: 0 }),
        PackStateOfCharge: faker.number.int({ max: 100, min: 0 }),
        PackVoltage: faker.number.int({ max: 100, min: 0 }),
      },
      BatteryTemperature: {
        AverageTemperature: faker.number.int({ max: 100, min: -40 }),
        HighTemperature: faker.number.int({ max: 100, min: -40 }),
        InternalTemperature: faker.number.int({ max: 100, min: -40 }),
        LowTemperature: faker.number.int({ max: 100, min: -40 }),
      },
      BmuAlive: faker.number.int({ max: 1, min: 0 }),
      ChargeRelayEnabled: faker.datatype.boolean(),
      ChargerSafetyEnabled: faker.datatype.boolean(),
      DischargeRelayEnabled: faker.datatype.boolean(),
      HighThermistorId: faker.number.int({ max: 100, min: 0 }),
      IsChargingSignalStatus: faker.datatype.boolean(),
      IsReadySignalStatus: faker.datatype.boolean(),
      LowThermistorId: faker.number.int({ max: 100, min: 0 }),
      MalfunctionIndicatorActive: faker.datatype.boolean(),
      MultiPurposeInputSignalStatus: faker.datatype.boolean(),
    },
    BatteryFaults: {
      Errors: {
        AlwaysOnSupplyFault: faker.datatype.boolean({ probability: 0.01 }),
        CanbusCommunicationFault: faker.datatype.boolean({ probability: 0.01 }),
        ChargeLimitEnforcementFault: faker.datatype.boolean({
          probability: 0.01,
        }),
        ChargerSafetyRelayFault: faker.datatype.boolean({ probability: 0.01 }),
        CurrentSensorFault: faker.datatype.boolean({ probability: 0.01 }),
        DischargeLimitEnforcementFault: faker.datatype.boolean({
          probability: 0.01,
        }),
        FanMonitorFault: faker.datatype.boolean({ probability: 0.01 }),
        HighVoltageIsolationFault: faker.datatype.boolean({
          probability: 0.01,
        }),
        InternalCommunicationFault: faker.datatype.boolean({
          probability: 0.01,
        }),
        InternalConversionFault: faker.datatype.boolean({ probability: 0.01 }),
        InternalLogicFault: faker.datatype.boolean({ probability: 0.01 }),
        InternalMemoryFault: faker.datatype.boolean({ probability: 0.01 }),
        InternalThermistorFault: faker.datatype.boolean({ probability: 0.01 }),
        LowCellVoltageFault: faker.datatype.boolean({ probability: 0.01 }),
        OpenWiringFault: faker.datatype.boolean({ probability: 0.01 }),
        PackVoltageSensorFault: faker.datatype.boolean({ probability: 0.01 }),
        PowerSupply12VFault: faker.datatype.boolean({ probability: 0.01 }),
        ThermistorFault: faker.datatype.boolean({ probability: 0.01 }),
        VoltageRedundancyFault: faker.datatype.boolean({ probability: 0.01 }),
        WeakCellFault: faker.datatype.boolean({ probability: 0.01 }),
        WeakPackFault: faker.datatype.boolean({ probability: 0.01 }),
      },
      Warnings: {
        CclReducedDueToAlternateCurrentLimit: faker.datatype.boolean({
          probability: 0.01,
        }),
        CclReducedDueToChargerLatch: faker.datatype.boolean({
          probability: 0.01,
        }),
        CclReducedDueToHighCellResistance: faker.datatype.boolean({
          probability: 0.01,
        }),
        CclReducedDueToHighCellVoltage: faker.datatype.boolean({
          probability: 0.01,
        }),
        CclReducedDueToHighPackVoltage: faker.datatype.boolean({
          probability: 0.01,
        }),
        CclReducedDueToHighSoc: faker.datatype.boolean({ probability: 0.01 }),
        CclReducedDueToTemperature: faker.datatype.boolean({
          probability: 0.01,
        }),
        DclAndCclReducedDueToCommunicationFailsafe: faker.datatype.boolean({
          probability: 0.01,
        }),
        DclAndCclReducedDueToVoltageFailsafe: faker.datatype.boolean({
          probability: 0.01,
        }),
        DclReducedDueToHighCellResistance: faker.datatype.boolean({
          probability: 0.01,
        }),
        DclReducedDueToLowCellVoltage: faker.datatype.boolean({
          probability: 0.01,
        }),
        DclReducedDueToLowPackVoltage: faker.datatype.boolean({
          probability: 0.01,
        }),
        DclReducedDueToLowSoc: faker.datatype.boolean({ probability: 0.01 }),
        DclReducedDueToTemperature: faker.datatype.boolean({
          probability: 0.01,
        }),
      },
    },
    KeyMotor: {
      ControlMode: faker.datatype.boolean(),
      DebugMode: faker.datatype.boolean(),
      MotorMode: faker.datatype.boolean(),
      MotorSetpoint: faker.number.int({ max: 100, min: 0 }),
      SoftwareEnable: faker.datatype.boolean(),
    },
    MBMS: {
      AllowCharge: faker.datatype.boolean(),
      AllowDischarge: faker.datatype.boolean(),
      ArrayContactorError: faker.datatype.boolean(),
      ArrayContactorState: faker.datatype.boolean(),
      ArrayCurrent: faker.number.int({ max: 100, min: 0 }),
      ArrayHighTemperatureCurrentTrip: faker.datatype.boolean(),
      ArrayVoltage: faker.number.int({ max: 100, min: 0 }),
      AuxillaryBatteryVoltage: faker.number.int({ max: 100, min: 0 }),
      ChargeContactorError: faker.datatype.boolean(),
      ChargeContactorState: faker.datatype.boolean(),
      ChargeCurrent: faker.number.int({ max: 100, min: 0 }),
      ChargeHighTemperatureCurrentTrip: faker.datatype.boolean(),
      ChargeShouldTrip: faker.datatype.boolean(),
      ChargeVoltage: faker.number.int({ max: 100, min: 0 }),
      CommonContactorError: faker.datatype.boolean(),
      CommonContactorState: faker.datatype.boolean(),
      CommonCurrent: faker.number.int({ max: 100, min: 0 }),
      ContactorDisconnectedUnexpectedlyTrip: faker.datatype.boolean(),
      DischargeShouldTrip: faker.datatype.boolean(),
      HighCellVoltageTrip: faker.datatype.boolean(),
      HighCommonCurrentTrip: faker.datatype.boolean(),
      HighVoltageEnableState: faker.datatype.boolean(),
      LowCellVoltageTrip: faker.datatype.boolean(),
      LvContactorError: faker.datatype.boolean(),
      LvContactorState: faker.datatype.boolean(),
      LvCurrent: faker.number.int({ max: 100, min: 0 }),
      LvHighTemperatureCurrentTrip: faker.datatype.boolean(),
      LvVoltage: faker.number.int({ max: 100, min: 0 }),
      MotorContactorError: faker.datatype.boolean(),
      MotorContactorState: faker.datatype.boolean(),
      MotorCurrent: faker.number.int({ max: 100, min: 0 }),
      MotorHighTemperatureCurrentTrip: faker.datatype.boolean(),
      MotorVoltage: faker.number.int({ max: 100, min: 0 }),
      OrionCanReceivedRecently: faker.datatype.boolean(),
      OrionMessageTimeoutTrip: faker.datatype.boolean(),
      ProtectionTrip: faker.datatype.boolean(),
      StrobeBmsLight: faker.datatype.boolean(),
    },
    MPPT0: {
      ArrayCurrent: faker.number.int({ max: 100, min: 0 }),
      ArrayVoltage: faker.number.int({ max: 100, min: 0 }),
      BatteryVoltage: faker.number.int({ max: 100, min: 0 }),
      ChannelNumber: faker.number.int({ max: 100, min: 0 }),
      IsAlive: faker.datatype.boolean(),
      Temperature: faker.number.int({ max: 100, min: 0 }),
    },
    MPPT1: {
      ArrayCurrent: faker.number.int({ max: 100, min: 0 }),
      ArrayVoltage: faker.number.int({ max: 100, min: 0 }),
      BatteryVoltage: faker.number.int({ max: 100, min: 0 }),
      ChannelNumber: faker.number.int({ max: 100, min: 0 }),
      IsAlive: faker.datatype.boolean(),
      Temperature: faker.number.int({ max: 100, min: 0 }),
    },
    MPPT2: {
      ArrayCurrent: faker.number.int({ max: 100, min: 0 }),
      ArrayVoltage: faker.number.int({ max: 100, min: 0 }),
      BatteryVoltage: faker.number.int({ max: 100, min: 0 }),
      ChannelNumber: faker.number.int({ max: 100, min: 0 }),
      IsAlive: faker.datatype.boolean(),
      Temperature: faker.number.int({ max: 100, min: 0 }),
    },
    MPPT3: {
      ArrayCurrent: faker.number.int({ max: 100, min: 0 }),
      ArrayVoltage: faker.number.int({ max: 100, min: 0 }),
      BatteryVoltage: faker.number.int({ max: 100, min: 0 }),
      ChannelNumber: faker.number.int({ max: 100, min: 0 }),
      IsAlive: faker.datatype.boolean(),
      Temperature: faker.number.int({ max: 100, min: 0 }),
    },

    MotorDetails0: {
      AbsoluteAngle: faker.number.int({ max: 360, min: 0 }),
      ControlMode: faker.datatype.boolean(),
      ControlValue: faker.number.int({ max: 100, min: 0 }),
      CurrentMotorPower: faker.number.int({ max: 100, min: 0 }),
      CurrentMotorTorque: faker.number.int({ max: 100, min: 0 }),
      CurrentRpmValue: faker.number.int({ max: 5000, min: 0 }),
      DebugMode: faker.datatype.boolean(),
      InverterPeakCurrent: faker.number.int({ max: 500, min: 0 }),
      MotorErrors: {
        CanCommsTimeoutError: faker.datatype.boolean({ probability: 0.01 }),
        CanSendError: faker.datatype.boolean(),
        ControllerDataReadingTimeout: faker.datatype.boolean({
          probability: 0.01,
        }),
        CpuOverload: faker.datatype.boolean(),
        CpuTempTooHigh: faker.datatype.boolean(),
        DcOvervoltageError: faker.datatype.boolean({ probability: 0.01 }),
        DcUndervoltageError: faker.datatype.boolean({ probability: 0.01 }),
        DclinkTempTooHigh: faker.datatype.boolean(),
        DoubleCanIdOnBus: faker.datatype.boolean(),
        ErrorInDclinkCommunication: faker.datatype.boolean({
          probability: 0.01,
        }),
        ErrorReadingEncoder: faker.datatype.boolean({ probability: 0.01 }),
        ErrorReadingTempSensor: faker.datatype.boolean({ probability: 0.01 }),
        HallTempTooHigh: faker.datatype.boolean(),
        HwEnableNotSet: faker.datatype.boolean(),
        InitError: faker.datatype.boolean(),
        InvalidHallSector: faker.datatype.boolean(),
        InvalidHallSensorSequence: faker.datatype.boolean({
          probability: 0.01,
        }),
        Inverter1FaultError: faker.datatype.boolean({ probability: 0.01 }),
        Inverter1OvercurrentError: faker.datatype.boolean({
          probability: 0.01,
        }),
        Inverter1TempTooHigh: faker.datatype.boolean(),
        Inverter2FaultError: faker.datatype.boolean({ probability: 0.01 }),
        Inverter2OvercurrentError: faker.datatype.boolean({
          probability: 0.01,
        }),
        Inverter2TempTooHigh: faker.datatype.boolean(),
        Inverter3FaultError: faker.datatype.boolean({ probability: 0.01 }),
        Inverter3OvercurrentError: faker.datatype.boolean({
          probability: 0.01,
        }),
        Inverter3TempTooHigh: faker.datatype.boolean(),
        Inverter4FaultError: faker.datatype.boolean({ probability: 0.01 }),
        Inverter4OvercurrentError: faker.datatype.boolean({
          probability: 0.01,
        }),
        Inverter4TempTooHigh: faker.datatype.boolean(),
        Inverter5FaultError: faker.datatype.boolean({ probability: 0.01 }),
        Inverter5OvercurrentError: faker.datatype.boolean({
          probability: 0.01,
        }),
        Inverter5TempTooHigh: faker.datatype.boolean(),
        Inverter6FaultError: faker.datatype.boolean({ probability: 0.01 }),
        Inverter6OvercurrentError: faker.datatype.boolean({
          probability: 0.01,
        }),
        Inverter6TempTooHigh: faker.datatype.boolean(),
        LostFramesOnCanBusError: faker.datatype.boolean({ probability: 0.01 }),
        MotorStalled: faker.datatype.boolean(),
        OverspeedError: faker.datatype.boolean({ probability: 0.01 }),
        PositionSensorReadingError: faker.datatype.boolean({
          probability: 0.01,
        }),
        SettingsNotFound: faker.datatype.boolean(),
        ZeroPositionOffsetNotSet: faker.datatype.boolean(),
      },
      MotorMode: faker.datatype.boolean(),
      MotorTemperature: faker.number.int({ max: 150, min: -40 }),
      MotorWarnings: {
        CanCommsTimeoutWarning: faker.datatype.boolean({ probability: 0.01 }),
        CanSendWarning: faker.datatype.boolean(),
        CpuOverload: faker.datatype.boolean(),
        CpuTemperatureVeryHigh: faker.datatype.boolean(),
        DcOvervoltageWarning: faker.datatype.boolean({ probability: 0.01 }),
        DcUndervoltageWarning: faker.datatype.boolean({ probability: 0.01 }),
        DclinkTemperatureVeryHigh: faker.datatype.boolean(),
        DelayInDclinkCommunication: faker.datatype.boolean(),
        DelayInReadingPosSensor: faker.datatype.boolean(),
        DelayInReadingTempSensor: faker.datatype.boolean(),
        HallTemperatureVeryHigh: faker.datatype.boolean(),
        Inverter1FaultWarning: faker.datatype.boolean({ probability: 0.01 }),
        Inverter1OverCurrentWarning: faker.datatype.boolean({
          probability: 0.01,
        }),
        Inverter1TempVeryHigh: faker.datatype.boolean(),
        Inverter2FaultWarning: faker.datatype.boolean({ probability: 0.01 }),
        Inverter2OverCurrentWarning: faker.datatype.boolean({
          probability: 0.01,
        }),
        Inverter2TempVeryHigh: faker.datatype.boolean(),
        Inverter3FaultWarning: faker.datatype.boolean({ probability: 0.01 }),
        Inverter3OverCurrentWarning: faker.datatype.boolean({
          probability: 0.01,
        }),
        Inverter3TempVeryHigh: faker.datatype.boolean(),
        Inverter4FaultWarning: faker.datatype.boolean({ probability: 0.01 }),
        Inverter4OverCurrentWarning: faker.datatype.boolean({
          probability: 0.01,
        }),
        Inverter4TempVeryHigh: faker.datatype.boolean(),
        Inverter5FaultWarning: faker.datatype.boolean({ probability: 0.01 }),
        Inverter5OverCurrentWarning: faker.datatype.boolean({
          probability: 0.01,
        }),
        Inverter5TempVeryHigh: faker.datatype.boolean(),
        Inverter6FaultWarning: faker.datatype.boolean({ probability: 0.01 }),
        Inverter6OverCurrentWarning: faker.datatype.boolean({
          probability: 0.01,
        }),
        Inverter6TempVeryHigh: faker.datatype.boolean(),
        LostFramesOnCanBusWarning: faker.datatype.boolean({
          probability: 0.01,
        }),
        MotorAboutToStall: faker.datatype.boolean(),
        OverspeedWarning: faker.datatype.boolean({ probability: 0.01 }),
        StartAtHighRpm: faker.datatype.boolean(),
        TorqueLimited: faker.datatype.boolean(),
      },
      SoftwareEnable: faker.datatype.boolean(),
    },
    MotorDetails1: {
      AbsoluteAngle: faker.number.int({ max: 360, min: 0 }),
      ControlMode: faker.datatype.boolean(),
      ControlValue: faker.number.int({ max: 100, min: 0 }),
      CurrentMotorPower: faker.number.int({ max: 100, min: 0 }),
      CurrentMotorTorque: faker.number.int({ max: 100, min: 0 }),
      CurrentRpmValue: faker.number.int({ max: 5000, min: 0 }),
      DebugMode: faker.datatype.boolean(),
      InverterPeakCurrent: faker.number.int({ max: 500, min: 0 }),
      MotorErrors: {
        CanCommsTimeoutError: faker.datatype.boolean({ probability: 0.01 }),
        CanSendError: faker.datatype.boolean(),
        ControllerDataReadingTimeout: faker.datatype.boolean({
          probability: 0.01,
        }),
        CpuOverload: faker.datatype.boolean(),
        CpuTempTooHigh: faker.datatype.boolean(),
        DcOvervoltageError: faker.datatype.boolean({ probability: 0.01 }),
        DcUndervoltageError: faker.datatype.boolean({ probability: 0.01 }),
        DclinkTempTooHigh: faker.datatype.boolean(),
        DoubleCanIdOnBus: faker.datatype.boolean(),
        ErrorInDclinkCommunication: faker.datatype.boolean({
          probability: 0.01,
        }),
        ErrorReadingEncoder: faker.datatype.boolean({ probability: 0.01 }),
        ErrorReadingTempSensor: faker.datatype.boolean({ probability: 0.01 }),
        HallTempTooHigh: faker.datatype.boolean(),
        HwEnableNotSet: faker.datatype.boolean(),
        InitError: faker.datatype.boolean(),
        InvalidHallSector: faker.datatype.boolean(),
        InvalidHallSensorSequence: faker.datatype.boolean({
          probability: 0.01,
        }),
        Inverter1FaultError: faker.datatype.boolean({ probability: 0.01 }),
        Inverter1OvercurrentError: faker.datatype.boolean({
          probability: 0.01,
        }),
        Inverter1TempTooHigh: faker.datatype.boolean(),
        Inverter2FaultError: faker.datatype.boolean({ probability: 0.01 }),
        Inverter2OvercurrentError: faker.datatype.boolean({
          probability: 0.01,
        }),
        Inverter2TempTooHigh: faker.datatype.boolean(),
        Inverter3FaultError: faker.datatype.boolean({ probability: 0.01 }),
        Inverter3OvercurrentError: faker.datatype.boolean({
          probability: 0.01,
        }),
        Inverter3TempTooHigh: faker.datatype.boolean(),
        Inverter4FaultError: faker.datatype.boolean({ probability: 0.01 }),
        Inverter4OvercurrentError: faker.datatype.boolean({
          probability: 0.01,
        }),
        Inverter4TempTooHigh: faker.datatype.boolean(),
        Inverter5FaultError: faker.datatype.boolean({ probability: 0.01 }),
        Inverter5OvercurrentError: faker.datatype.boolean({
          probability: 0.01,
        }),
        Inverter5TempTooHigh: faker.datatype.boolean(),
        Inverter6FaultError: faker.datatype.boolean({ probability: 0.01 }),
        Inverter6OvercurrentError: faker.datatype.boolean({
          probability: 0.01,
        }),
        Inverter6TempTooHigh: faker.datatype.boolean(),
        LostFramesOnCanBusError: faker.datatype.boolean({ probability: 0.01 }),
        MotorStalled: faker.datatype.boolean(),
        OverspeedError: faker.datatype.boolean({ probability: 0.01 }),
        PositionSensorReadingError: faker.datatype.boolean({
          probability: 0.01,
        }),
        SettingsNotFound: faker.datatype.boolean(),
        ZeroPositionOffsetNotSet: faker.datatype.boolean(),
      },
      MotorMode: faker.datatype.boolean(),
      MotorTemperature: faker.number.int({ max: 150, min: -40 }),
      MotorWarnings: {
        CanCommsTimeoutWarning: faker.datatype.boolean({ probability: 0.01 }),
        CanSendWarning: faker.datatype.boolean(),
        CpuOverload: faker.datatype.boolean(),
        CpuTemperatureVeryHigh: faker.datatype.boolean(),
        DcOvervoltageWarning: faker.datatype.boolean({ probability: 0.01 }),
        DcUndervoltageWarning: faker.datatype.boolean({ probability: 0.01 }),
        DclinkTemperatureVeryHigh: faker.datatype.boolean(),
        DelayInDclinkCommunication: faker.datatype.boolean(),
        DelayInReadingPosSensor: faker.datatype.boolean(),
        DelayInReadingTempSensor: faker.datatype.boolean(),
        HallTemperatureVeryHigh: faker.datatype.boolean(),
        Inverter1FaultWarning: faker.datatype.boolean({ probability: 0.01 }),
        Inverter1OverCurrentWarning: faker.datatype.boolean({
          probability: 0.01,
        }),
        Inverter1TempVeryHigh: faker.datatype.boolean(),
        Inverter2FaultWarning: faker.datatype.boolean({ probability: 0.01 }),
        Inverter2OverCurrentWarning: faker.datatype.boolean({
          probability: 0.01,
        }),
        Inverter2TempVeryHigh: faker.datatype.boolean(),
        Inverter3FaultWarning: faker.datatype.boolean({ probability: 0.01 }),
        Inverter3OverCurrentWarning: faker.datatype.boolean({
          probability: 0.01,
        }),
        Inverter3TempVeryHigh: faker.datatype.boolean(),
        Inverter4FaultWarning: faker.datatype.boolean({ probability: 0.01 }),
        Inverter4OverCurrentWarning: faker.datatype.boolean({
          probability: 0.01,
        }),
        Inverter4TempVeryHigh: faker.datatype.boolean(),
        Inverter5FaultWarning: faker.datatype.boolean({ probability: 0.01 }),
        Inverter5OverCurrentWarning: faker.datatype.boolean({
          probability: 0.01,
        }),
        Inverter5TempVeryHigh: faker.datatype.boolean(),
        Inverter6FaultWarning: faker.datatype.boolean({ probability: 0.01 }),
        Inverter6OverCurrentWarning: faker.datatype.boolean({
          probability: 0.01,
        }),
        Inverter6TempVeryHigh: faker.datatype.boolean(),
        LostFramesOnCanBusWarning: faker.datatype.boolean({
          probability: 0.01,
        }),
        MotorAboutToStall: faker.datatype.boolean(),
        OverspeedWarning: faker.datatype.boolean({ probability: 0.01 }),
        StartAtHighRpm: faker.datatype.boolean(),
        TorqueLimited: faker.datatype.boolean(),
      },
      SoftwareEnable: faker.datatype.boolean(),
    },
    Pi: {
      rfid: faker.number.int({ max: 100, min: 0 }),
    },
    ProximitySensors: {
      ProximitySensor1: faker.number.int({ max: 100, min: 0 }),
      ProximitySensor2: faker.number.int({ max: 100, min: 0 }),
      ProximitySensor3: faker.number.int({ max: 100, min: 0 }),
      ProximitySensor4: faker.number.int({ max: 100, min: 0 }),
    },
    Telemetry: {
      GpsAdditionalFlags: faker.number.int({ max: 255, min: 0 }),
      GpsDay: faker.number.int({ max: 31, min: 1 }),
      GpsFixStatusFlags: faker.number.int({ max: 255, min: 0 }),
      GpsHour: faker.number.int({ max: 23, min: 0 }),
      GpsLatitude: latitude,
      GpsLongitude: longitude,
      GpsMinute: faker.number.int({ max: 59, min: 0 }),
      GpsMonth: faker.number.int({ max: 12, min: 1 }),
      GpsSecond: faker.number.int({ max: 59, min: 0 }),
      GpsValidityFlags: faker.number.int({ max: 255, min: 0 }),
      GpsYear: faker.number.int({ max: 2100, min: 2000 }),
      MpuAccelerationX: faker.number.float({ max: 16, min: -16 }),
      MpuAccelerationY: faker.number.float({ max: 16, min: -16 }),
      MpuAccelerationZ: faker.number.float({ max: 16, min: -16 }),
      MpuRotationX: faker.number.float({ max: 2000, min: -2000 }),
      MpuRotationY: faker.number.float({ max: 2000, min: -2000 }),
      MpuRotationZ: faker.number.float({ max: 2000, min: -2000 }),
      MpuTemperature: faker.number.float({ max: 85, min: -40 }),
    },
    TimeStamp: faker.date.recent().getTime(),
    Title: faker.lorem.words(2),
  };
}
